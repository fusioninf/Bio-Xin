
@{
    ViewBag.Title = "Add Inventory Transfer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .custom-header {
        background-color: darkgray !important; /* Blue color #007bff  #808080*/
        color: black; /* Text color for contrast */
    }
    .spinnermodal {
        background-color: #FFFFFF;
        height: 100%;
        left: 0;
        opacity: 0.5;
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 100000;
    }
</style>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header custom-header">
                        <div class="row">
                            <div class="col-md-6">
                                <a href="@Url.Action("AddInventoryTransfer", "InventoryTransfer", new {itId = 0})">
                                    <h3 class="card-title">
                                        @if (ViewBag.InventoryTransferId == 0)
                                        {
                                            <span class="" style="color:black"><b>Inventory Transfer</b></span>
                                        }
                                        else
                                        {
                                            <span class=""> Edit Inventory Transfer</span>
                                        }
                                    </h3>
                                </a>
                            </div>
                            <div class="col-md-6 text-right">
                                <a class="btn btn-outline-warning" href="@Url.Action("Index", "InventoryTransfer")">
                                    <span class="fa fa-list"></span> Inventory Transfer Home
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                             
                                <div class="form-group row" id="divCopyFrom">
                                    <label for="ddlCopyFrom" class="col-md-4 control-label">Copy From</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width: 100%; text-align: center" id="ddlCopyFrom"></select>
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divFromWarehouse">
                                    <label for="ddlFromWarehouse" class="col-md-4 control-label">From Warehouse</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width: 100%;text-align:center" id="ddlFromWarehouse"></select>
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divToWarehouse">
                                    <label for="ddlToWarehouse" class="col-md-4 control-label">To Warehouse</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width: 100%;text-align:center" id="ddlToWarehouse"></select>
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divBranch">
                                    <label for="ddlBranch" class="col-md-4 control-label">Branch</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width: 100%; text-align: center" id="ddlBranch" disabled="disabled"></select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group row mt-1" id="divType">
                                    <label for="ddlType" class="col-md-3 control-label">Type</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width:100%;" id="ddlType">
                                            <option value="I" selected>Item</option>
                                        </select>
                                    </div>

                                </div>
                                <div class="form-group row mt-1">
                                    <label for="txtCustomerName" class="col-md-3 control-label">Item Code</label>
                                    <div class="col-md-6">
                                        <input type="text" placeholder="Search Item Code" id="txtSearchItemCode" readonly class="form-control" autocomplete="off" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1">
                                    <label for="txtCustomerName" class="col-md-3 control-label">Item Name</label>
                                    <div class="col-md-6">
                                        <input type="text" placeholder="Search Item Name" id="txtSearchItemName" readonly class="form-control" autocomplete="off" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group row" id="divDocumentNo">
                                    <label for="txtDocumentNo" class="col-md-4 control-label">Document No</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtDocumentNo" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divStatus">
                                    <label for="txtStatus" class="col-md-4 control-label">Status</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtStatus" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divDocDate">
                                    <label for="txtDocDate" class="col-md-4 control-label">Posting Date</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtDocDate" class="form-control datepicker" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divDocDueDate">
                                    <label for="txtDocDueDate" class="col-md-4 control-label">Delivery Date</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtDocDueDate" class="form-control" />
                                    </div>
                                </div>
                              
                            </div>

                        </div>
                        <div class="row">
                            &nbsp;
                        </div>
                        <div class="row table-responsive">
                            <table class="table table-bordered table-striped table-hover" id="salesOrder">
                                <thead>
                                    <tr style="background-color: lightgrey">
                                        <th class="action">Action</th>
                                        <th>#</th>
                                        <th>Item Code</th>
                                        <th>Item Name</th>
                                        <th>UOM</th>
                                        <th>Quantity</th>
                                        <th>Batches</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group row mt-3" id="divSalesEmployee">
                                    <label for="lblRestAmount" class="col-md-4 control-label">Requested By</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width: 100%;" id="ddlSalesEmployee"></select>
                                    </div>
                                </div>
                             
                                <div class="form-group row mt-1" id="divRrmarks">
                                    <label for="taxVat" class="col-md-4 control-label">Remarks</label>
                                    <div class="col-md-6">
                                        @*<textarea class="form-control" id="txtRrmarks" name="w3review" rows="5" cols="30"></textarea>*@
                                        <textarea id="txtRrmarks" name="w3review" rows="5" cols="28" style="border: 1px solid #ced4da; border-radius: 4px "></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4"></div>
                            <div class="col-md-4"></div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-warning" id="btnit" onclick="SaveInventoryTransfer()">Add & New</button>
                        <button class="btn btn-warning  float-right" onclick="location.reload()">Clear</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div id="main" style="display:none"></div>
        </div>

        <input id="inventoryTransferId" type="number" style="display: none;" value="@ViewBag.InventoryTransferId">
        <input id="branch" type="number" style="display: none;" value="@ViewBag.Branch">
        <input id="userId" type="text" style="display: none;" value="@ViewBag.UserId">
        <input id="eflag" type="text" style="display: none;" value="@ViewBag.eflag">
    </div>
    <div class="spinnermodal" id="testSpan" style="display: none; z-index: 10001">
        <div style="position: fixed; z-index: 10001; top: 50%; left: 50%; height:50px">
            <img src="~/AssetStatic/img/loading_spinner.gif" />
        </div>
    </div>
</section>

@*//Batches popUp*@
<div class="modal fade" tabindex="-1" id="viewModal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 50% !important">
        <div class="modal-content">
            <div class="modal-header">

            </div>
            <div class="modal-body" id="containerDetails">
                @*<div id="containerDetailsRow">

                    </div>*@
            </div>
            <div class="modal-footer">
                <input type="text" style="display:none;" id="eid" />
                <button class="btn btn-primary" data-bs-target="#viewModal" data-bs-toggle="modal" data-bs-dismiss="modal" onclick="RemoveBatches()">Close</button>
                @*<button type="button" id="batchesClose" data-dismiss="modal" style="display: none">Close</button>*@
                <button class="btn btn-primary" data-bs-target="#viewModal" data-bs-toggle="modal" data-bs-dismiss="modal" id="batchesSave" onclick="AddBatches()">Save</button>
            </div>
        </div>
    </div>
</div>
@*//End of the Batches popUp*@
@section Scripts{
    <script type="text/javascript">
        var itemList = {};
        var fromWarehouseList = {};
        var toWarehouseList = {};
        var srcount = 0;
        $(document).ready(function () {
            LoadDate_C('#txtDocDate');
            LoadDate_C('#txtDocDueDate');
            LoadSalesEmployee('ddlSalesEmployee');
            GetFromWarehouses('ddlFromWarehouse');
            GetToWarehouses('ddlToWarehouse');
            LoadBranch('ddlBranch');
            var branch = $('#branch').val();
            $("#ddlBranch").val(branch).trigger('change');
            LoadCopyFrom('ddlCopyFrom');
            $('#ddlCopyFrom').change(function () {
                var DocEntry = $('#ddlCopyFrom').val();
                if (DocEntry != null && DocEntry != "") {
                    GetTransferRequestByDocEntry(DocEntry);

                    $("#ddlType").prop("disabled", true);
                /*    $("#ddlSearchType").prop("disabled", true);*/
                    $("#txtSearchItemCode").prop("disabled", true);
                    $("#txtSearchItemName").prop("disabled", true);
                } else {

                    $('#ddlFromWarehouse').val('').trigger('change');
                    $('#ddlToWarehouse').val('').trigger('change');
                    $("#ddlFromWarehouse").prop("disabled", false);
                    $("#ddlFromWarehouse").prop("disabled", false);

                    $("#ddlType").prop("disabled", false);
                /*    $("#ddlSearchType").prop("disabled", false);*/
                    $("#txtSearchItemCode").prop("disabled", false);
                    $("#txtSearchItemName").prop("disabled", false);

                    var rowIndexToRemove = $('#salesOrder tbody tr').length;
                    if (rowIndexToRemove > 0 && rowIndexToRemove <= $('#salesOrder tbody tr').length) {
                        // Remove the row
                        $('#salesOrder tbody tr').remove();
                    }

                    $('#txtRrmarks').val('');
                    $('#ddlSalesEmployee').val(0).trigger('change');
               /*     AddRow();*/
                }

            });
            $("#txtSearchItemCode").autocomplete({
                source: function (request, response) {
                    debugger;
                    var _url = '';
                    var type = $("#ddlType").val();
                    if (type == "I") {
                        _url = '@Url.Action("AutoCompleteItem", "InventoryTransferRequest")';
                    }
                    if (type == "S") {
                        _url = '@Url.Action("AutoCompleteService", "SalesOrderNew")';
                    }

                $.ajax({
                    url: _url,
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                           if (data.UnAutorized == 1) {
                            window.location.href = '@Url.Action("Logout", "Home")';
                           } else {

                               response($.map(data.dataList, function (item) {
                                   return item.ItemCode + " | " + item.ItemName;
                               }));

                            @*if (data.dataList[0].ReturnCode == "-99999") {
                                window.location.href = '@Url.Action("Logout", "Home")';
                            } else {
                                response($.map(data.dataList, function (item) {
                                    return item.ItemCode + " | " + item.ItemName;
                                }));
                            }*@
                          }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (event, ui) {
                debugger;
                var str = ui.item.value;
                var ret2 = str.replace(" | ", '|');
                var ret = ret2.split('|');
                var itemCode = ret[0];
                var itemName = ret[1];
                AddItemRow(itemCode);
                },
                minLength: 3
                , close: function (event, ui) {
                    debugger;
                    $("#txtSearchItemCode").val("");
                }
            });
            $("#txtSearchItemName").autocomplete({
                source: function (request, response) {
                    debugger;
                    var _url = '';
                    var type = $("#ddlType").val();
                    if (type == "I") {
                        _url = '@Url.Action("AutoCompleteItemName", "InventoryTransferRequest")';
                    }
                    @*if (type == "S") {
                        _url = '@Url.Action("AutoCompleteService", "SalesOrderNew")';
                    }*@

                $.ajax({
                    url: _url,
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                           if (data.UnAutorized == 1) {
                            window.location.href = '@Url.Action("Logout", "Home")';
                           } else {

                               response($.map(data.dataList, function (item) {
                                   return item.ItemCode + " | " + item.ItemName;
                               }));

                            @*if (data.dataList[0].ReturnCode == "-99999") {
                                window.location.href = '@Url.Action("Logout", "Home")';
                            } else {
                                response($.map(data.dataList, function (item) {
                                    return item.ItemCode + " | " + item.ItemName;
                                }));
                            }*@
                          }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (event, ui) {
                debugger;
                var str = ui.item.value;
                var ret2 = str.replace(" | ", '|');
                var ret = ret2.split('|');
                var itemCode = ret[0];
                var itemName = ret[1];
                AddItemRow(itemCode);
                },
                minLength: 3
                , close: function (event, ui) {
                    debugger;
                    $("#txtSearchItemName").val("");
                }
            });

            $('#ddlFromWarehouse').on("change", function () {
                if ($(this).val() && $(this).val().trim() !== '') {
                    $('#txtSearchItemCode').attr('readonly', false);
                    $('#txtSearchItemName').attr('readonly', false);
                } else {
                    $('#txtSearchItemCode').attr('readonly', true);
                    $('#txtSearchItemName').attr('readonly', true);
                }
             
            })

        });//End of the Document Ready


        function LoadBusinessPartner(elementId) {
            var CardType = "C";
            var urlpath = '@Url.Action("GetBusinessPartner", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { CardType: CardType },
            /*    data: {  },*/
                async: false,
                success: function(data) {

                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append("<option value=''>--Select Business Partner--</option>");
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].CardCode).html(data[i].CardName + " | " + data[i].CardCode + " | " + data[i].Mobile));
                    }

                }
            });
        }
        function GetBusinessPartnerInfo(CardCode) {
            var urlpath = '@Url.Action("GetBusinessPartnerByCardCode", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                dataType: 'json',
                type: "Get",
                data: { CardCode: CardCode },
                async: false,
                success: function(data) {
                    debugger;
                    $('#txtCustomerCode').val(data.CardCode);
                    LoadContactPerson('ddlContactPerson');
                    $("#ddlContactPerson").val(data.ContactPerson).trigger('change');
                }
            });
        }
        function LoadSalesEmployee(elementId) {
            var urlpath = '@Url.Action("GetSalesEmployee", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: {},
                async: false,
                success: function(data) {

                    $('#' + elementId + '').empty();
/*                    $('#' + elementId + '').append("<option value='0'>--Select Customer--</option>");*/
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].SlpCode).html(data[i].SlpName));
                    }

                }
            });
        }
        function LoadCopyFrom(elementId) {
            var urlpath = '@Url.Action("GetStockTransferRequestHeader", "InventoryTransfer")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { },
                async: false,
                success: function(data) {

                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append("<option value=''>--Select Transfer Request--</option>");
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].DocEntry).html(data[i].SAPDocNum));
                    }

                }
            });
        }
        function GetTransferRequestByDocEntry(DocEntry){
            var docEntry = DocEntry.toString();
            var urlpath = '@Url.Action("InventoryTransferRequestViewData", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                dataType: 'json',
                type: "Get",
                data: { DocEntry: docEntry },
                async: false,
                success: function (data) {
                    debugger;
                    //GetFromWarehouses('ddlFromWarehouse');
                    $("#ddlFromWarehouse").val(data.FromWhsCode).trigger('change');
                   // GetToWarehouses('ddlToWarehouse');
                    $("#ddlToWarehouse").val(data.ToWhsCode).trigger('change');
                    $("#ddlFromWarehouse").prop("disabled", true);
                    $("#ddlFromWarehouse").prop("disabled", true);
                    $('#txtRrmarks').val(data.Remarks);

                    var rowIndexToRemove = $('#salesOrder tbody tr').length;

                    if (rowIndexToRemove > 0 && rowIndexToRemove <= $('#salesOrder tbody tr').length) {
                        $('#salesOrder tbody tr').remove();
                    }
                    for (var i = 0; i < data.itemsViewModels.length; i++) {
                        var tr = $('#salesOrder tbody tr').length + 1;
                        AddRow();
                        if (data.itemsViewModels[i].ItemCode != "" && data.itemsViewModels[i].ItemCode != null) {
                            $("#itemCode_" + tr).val(data.itemsViewModels[i].ItemCode);
                            $('#itemCodeName_' + tr).val(data.itemsViewModels[i].ItemName);
                            $('#uom_' + tr).val(data.itemsViewModels[i].unitMsr);
                            $('#quantity_' + tr).val(data.itemsViewModels[i].Quantity);
                            $('#price_' + tr).val(data.itemsViewModels[i].Price);
                            var total = data.itemsViewModels[i].Quantity * data.itemsViewModels[i].Price
                            $("#value_" + tr).val(total);
                            $('#stock_' + tr).val(data.itemsViewModels[i].OpenQty);
                            $('#remarks_' + tr).val(data.itemsViewModels[i].Remarks);

                            $('#baseEntry_' + tr).val(data.itemsViewModels[i].DocEntry);
                            $('#baseLine_' + tr).val(data.itemsViewModels[i].LineNum);
                            $('#baseType_' + tr).val(data.itemsViewModels[i].ObjType);
                            GetItemDetailsCopyFrom(tr);
                        }
                    }

                }
            });
        }
        function GetItemDetailsCopyFrom(rowId) {
            var ItemCode = $('#itemCode_' + rowId).val();

            var urlpath = '@Url.Action("GetItemByItemCode", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'json',
                data: { ItemCode: ItemCode },
                async: false,
                success: function(data) {
                    debugger;
                    $("#batchNumberEnable_" + rowId).val(data.BatchNumberEnable);
                    $("#serialNumberEnable_" + rowId).val(data.SerialNumberEnable);

                    /*$("#inStock_" + rowId).val(data.InStock);*/
                    $("#showBtn_" + rowId).hide();
                    $("#showSerialBtn_" + rowId).hide();


                    if (data.BatchNumberEnable == "Y" && data.SerialNumberEnable == "N") {
                        $("#showBtn_" + rowId).show();
                        $("#showBtn_" + rowId).prop("disabled", false);
                    }
                    if (data.BatchNumberEnable == "N" && data.SerialNumberEnable == "Y") {
                        $("#showSerialBtn_" + rowId).show();
                        $("#showSerialBtn_" + rowId).prop("disabled", false);
                    }
                }
            });
        }
        function LoadBranch(elementId) {
            var CardType = "C";
            var urlpath = '@Url.Action("GetBranch", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { },
                async: false,
                success: function(data) {
                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append("<option value=''>--Select Branch--</option>");
                    for (var i = 0; i < data.length; i++) {
                        $('#' + elementId + '').append($("<option></option>").val(data[i].PrcCode).html(data[i].PrcName ));
                    }
                }
            });
        }
        function GetFromWarehouses(elementId) {
            @*var WhsType = "N";
            var urlpath = '@Url.Action("GetMainWarehouseAllBranch", "InventoryTransferRequest")';*@
                   var urlpath = '@Url.Action("GetWarehouse", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                /*  data: { WhsType: WhsType },*/
                data: {  },
                async: false,
                success: function(data) {
                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append("<option value=''>--Select Warehouse--</option>");
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].WhsCode).html(data[i].WhsName));
                    }
                }
            });
        }
        function GetToWarehouses(elementId) {

            var urlpath = '@Url.Action("GetWarehouseHead", "InventoryTransfer")';
            @*var urlpath = '@Url.Action("GetWarehouse", "InventoryTransferRequest")';*@
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { },
                async: false,
                success: function(data) {
                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append("<option value=''>--Select Warehouse--</option>");
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].WhsCode).html(data[i].WhsName));
                    }
                }
            });
        }
        function GetLineFromWarehouses(){
            var WhsType = "N";
            var urlpath = '@Url.Action("GetMainWarehouseAllBranch", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { WhsType: WhsType  },
                async: false,
                success: function(data) {
                    fromWarehouseList = data;
                }
            });
        }
        function GetLineToWarehouses(){
            var WhsType = "I";
            var urlpath = '@Url.Action("GetTransitWarehouse", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { WhsType: WhsType },
                async: false,
                success: function(data) {
                    toWarehouseList = data;
                }
            });
        }
        function GetMainWarehouses(elementId) {
            var WhsType = "M";
            var urlpath = '@Url.Action("GetMainWarehouse", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { WhsType: WhsType },
                async: false,
                success: function(data) {
                    $('#' + elementId + '').empty();
                    /*$('#' + elementId + '').append("<option value='0'>--Select Warehouse--</option>");*/
                    for (var i = 0; i < data.length; i++) {
                        $('#' + elementId + '').append($("<option></option>").val(data[i].WhsCode).html(data[i].WhsName));
                    }
                }
            });
        }
        function GetItem() {
            var urlpath = '@Url.Action("GetItem", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: {  },
                async: false,
                success: function(data) {
                    itemList = data;
                }
            });
        }
        function GetItemCodeDetails(rowId) {
            var ItemCode = $('#itemCodeName_' + rowId).val();

            var urlpath = '@Url.Action("GetItemByItemCode", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'json',
                data: { ItemCode: ItemCode },
                async: false,
                success: function(data) {
                    debugger;
                    //var DocEntry = $('#ddlCopyFrom').val();
                    //if (DocEntry == null || DocEntry == "") {
                    //    $("#itemCode_" + rowId).val(data.ItemCode).trigger('change');
                    //}
                    $("#itemCodeName_" + rowId).val(data.ItemName)
                    $("#itemCode_" + rowId).val(data.ItemCode)

                    $("#uom_" + rowId).val(data.InventoryUOM);
                    $("#price_" + rowId).val(data.LastPurchasePrice);
                    $("#batchNumberEnable_" + rowId).val(data.BatchNumberEnable);
                    $("#serialNumberEnable_" + rowId).val(data.SerialNumberEnable);

                    /*$("#inStock_" + rowId).val(data.InStock);*/
                    $("#showBtn_" + rowId).hide();
                    $("#showSerialBtn_" + rowId).hide();
                    if (data.BatchNumberEnable == "Y" && data.SerialNumberEnable == "N") {
                        $("#showBtn_" + rowId).show();
                        $("#showBtn_" + rowId).prop("disabled", true);
                    }
                    if (data.BatchNumberEnable == "N" && data.SerialNumberEnable == "Y") {
                        $("#showSerialBtn_" + rowId).show();
                        $("#showSerialBtn_" + rowId).prop("disabled", true);
                    }


                    $("#quantity_" + rowId).val('');
                   /* $("#price_" + rowId).val('');*/
                    /*$("#discount_" + rowId).val('');*/
                    $("#value_" + rowId).val('');
                    /*CalculateAll();*/
                }
            });
        }
        function GetItemDetails(itemCode, rowId) {
            //var ItemCode = $('#itemCode_' + rowId).val();

            var urlpath = '@Url.Action("GetItemByItemCode", "InventoryTransferRequest")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'json',
                data: { ItemCode: itemCode },
                async: false,
                success: function(data) {
                    debugger;
                    //var DocEntry = $('#ddlCopyFrom').val();
                    //if (DocEntry == null || DocEntry == "") {
                    //    $("#itemCodeName_" + rowId).val(data.ItemCode).trigger('change');
                    //}
                    $("#itemCodeName_" + rowId).val(data.ItemName)
                    $("#itemCode_" + rowId).val(data.ItemCode)

                    $("#uom_" + rowId).val(data.InventoryUOM);
                    $("#price_" + rowId).val(data.LastPurchasePrice);
                    $("#batchNumberEnable_" + rowId).val(data.BatchNumberEnable);
                    $("#serialNumberEnable_" + rowId).val(data.SerialNumberEnable);

                    /*$("#inStock_" + rowId).val(data.InStock);*/
                    $("#showBtn_" + rowId).hide();
                    $("#showSerialBtn_" + rowId).hide();
                    if (data.BatchNumberEnable == "Y" && data.SerialNumberEnable == "N") {
                        $("#showBtn_" + rowId).show();
                        $("#showBtn_" + rowId).prop("disabled", true);
                    }
                    if (data.BatchNumberEnable == "N" && data.SerialNumberEnable == "Y") {
                        $("#showSerialBtn_" + rowId).show();
                        $("#showSerialBtn_" + rowId).prop("disabled", true);
                    }


                    $("#quantity_" + rowId).val('');
                   /* $("#price_" + rowId).val('');*/
                    /*$("#discount_" + rowId).val('');*/
                    $("#value_" + rowId).val('');
                    /*CalculateAll();*/
                }
            });
        }
        function CalculateLineTotal(rowId) {
            debugger;
            $("#showBtn_" + rowId).prop("disabled", false);
            $("#showSerialBtn_" + rowId).prop("disabled", false);
            var quantity = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());
            var price = isNaN(parseFloat($('#price_' + rowId).val())) ? 0 : parseFloat($('#price_' + rowId).val());

            var total = quantity * price;

            $('#value_' + rowId).val(total.toFixed(2));
            /* CalculateAll();*/
        }
        function SaveInventoryTransfer() {
            if (SaveValidation() == true) {
                swal({
                    title: "Are you sure?",
                    text: "",
                    type: "success",
                    showCancelButton: true,
                    cancelButtonClass: 'btn-secondary waves-effect',
                    confirmButtonClass: 'btn-success waves-effect waves-light',
                    confirmButtonText: 'Yes!',
                    closeOnConfirm: false

                }, function() {
                    $('.confirm').prop("disabled", true);
                    $('.cancel').prop("disabled", true);
                    SaveITFinal();
                });
            }
        }
        function pad2(number) {
            return (number < 10 ? '0' : '') + number;
        }
        function DateConversionToYYYYMMDD(inputDate) {
            // Split the input date into day, month, and year parts
            var parts = inputDate.split('-');
            var day = parts[0];
            var month = parts[1];
            var year = parts[2];
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var monthIndex = monthNames.indexOf(month);
            monthIndex++; // Adjust for 0-based indexing
            // Create a Date object with the parsed values
            var dateObject = new Date(year, monthIndex - 1, day);
            // Format the date as "YYYYMMDD"
            var formattedDate = dateObject.getFullYear() + pad2(dateObject.getMonth() + 1) + pad2(dateObject.getDate());
            return formattedDate
        }
       
        //#region "Inventory Transfer Related JSViewModels"
        function VmInvTransfer() {
            var CardCode;
            var PostingDate;
            var DueDate;
            var RefDate;
            var ShiptoCode;
            var ContactPerson;
            var SalesEmployee;
            var FromWarehouse;
            var ToWarehouse;
            var Remarks;
            var EnteredBy;
            var Items = [];
        }
        function SaveITFinal() {
            swal.close();
            var dueDate = $('#txtDocDueDate').val();
            var postingDate = $('#txtDocDate').val();


            var newData = new VmInvTransfer();
            /*      newData.CardCode = $('#ddlCustomer').val() ?? "";*/
            newData.CardCode = "";
            newData.PostingDate = DateConversionToYYYYMMDD(postingDate);  //"20230814"
            newData.DueDate = DateConversionToYYYYMMDD(dueDate);
            newData.RefDate = DateConversionToYYYYMMDD(postingDate);
            newData.ShiptoCode = "";
            newData.FromWarehouse = $('#ddlFromWarehouse').val() ?? "";
            newData.ToWarehouse = $('#ddlToWarehouse').val() ?? "";
            /*    newData.ContactPerson = $('#ddlContactPerson').val() ?? "";*/
            newData.ContactPerson = "";
            newData.Remarks = $('#txtRrmarks').val() ?? "";
            newData.SalesEmployee = $('#ddlSalesEmployee').val() ?? "";
            newData.EnteredBy = $('#userId').val() ?? "";

            var count = 0;
            var vmInvItemsList = [];
            $('#salesOrder tbody tr').each(function () {
                var theObj = {};
                var idr = $(this).attr('id');
                var id = idr.substring(3);

                var itemCode = $('#itemCode_' + id).val();
                var qty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
                var price = isNaN(parseFloat($('#price_' + id).val())) ? 0 : parseFloat($('#price_' + id).val());
                var remarks = $('#remarks_' + id).val() ?? "";
                var baseEntry = $('#baseEntry_' + id).val() ?? "";
                var baseLine = $('#baseLine_' + id).val() ?? "";
                var baseType = $('#baseType_' + id).val() ?? "";

                //var fromWH = $('#fromWH_' + id).val() ?? "";
                //var toWH = $('#toWH_' + id).val() ?? "";

                var fromWH = $('#ddlFromWarehouse').val() ?? "";
                var toWH = $('#ddlToWarehouse').val() ?? "";

                var batchNumberEnable = $("#batchNumberEnable_" + id).val();
                var serialNumberEnable = $("#serialNumberEnable_" + id).val();
                debugger;
                var jsonObjsBatches = [];
                var jsonObjsSerial = [];

                if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
                    $("#batchesItem" + id + " tbody tr").each(function (key, value) {
                        var BatchesItemObj = {};
                        var soId = $(this).prop("id");
                        BatchesItemObj.VisOrder = count;
                        BatchesItemObj.BatchNo = $('#batchNo_' + id + soId).val() ?? "";
                        BatchesItemObj.BatchQuantity = $('#batchQuantity_' + id + soId).val() ?? 0;
                        jsonObjsBatches.push(BatchesItemObj);
                    });
                }
                if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
                    $("#serialItem" + id + " tbody tr").each(function (key, value) {
                        var SerialItemObj = {};
                        var soId = $(this).prop("id");
                        if ($('#chk_' + id + soId).is(":checked")) {
                            SerialItemObj.VisOrder = count;
                            SerialItemObj.InternalSerialNumber = $('#intrSerialNo_' + id + soId).val() ?? "";
                            SerialItemObj.SystemSerialNumber = $('#sysSerialNo_' + id + soId).val() ?? "";
                            SerialItemObj.ManufacturerSerialNumber = $('#suppSerialNo_' + id + soId).val() ?? "";
                            jsonObjsSerial.push(SerialItemObj);
                        }
                    });
                }


                vmInvItemsList.push({
                    VisOrder: count,
                    BaseType: baseType,
                    BaseEntry: baseEntry,
                    BaseLine: baseLine,
                    ItemCode: itemCode,
                    FromWareHouse: fromWH,
                    ToWareHouse: toWH,
                    Quantity: qty,
                    Price: price,
                    Remarks: remarks,
                    Batches: jsonObjsBatches,
                    Serial: jsonObjsSerial
                });
                count = count + 1;
            });
            newData.Items = vmInvItemsList;
            debugger;
            $.ajax({
                type: "POST",
                url: "/InventoryTransfer/SaveTransfer",
             /*   async: false,*/
                data: { model: newData },
                beforeSend: function () {
                    $('#testSpan').show();
                    $('#btnit').prop('disabled', true);
                },
                success: function (result) {
                    $('#testSpan').hide();
                    if (result.UnAutorized == 1) {
                        //Web Project Session Out
                        window.location.href = '@Url.Action("Logout", "Home")';
                    } else {
                        if (result.dataList.ReturnCode == "-99999") {
                            //API Project Session Out
                            window.location.href = '@Url.Action("Logout", "Home")';
                        } else {
                            var message = result.dataList.ReturnMsg;
                            if (result.dataList.ReturnCode == "0000") {
                        swal({
                            title: " Saved Successfull",
                            text: '',
                            type: "success",
                            showCancelButton: false,
                            cancelButtonClass: 'btn-secondary waves-effect',
                            confirmButtonClass: 'btn-success waves-effect waves-light',
                            confirmButtonText: 'Yes!',
                            closeOnConfirm: false
                        }, function () {
                            GetprintPage(result.dataList.ReturnDocEntry);
                             window.location.href =  '@Url.Action("Index", "InventoryTransfer")';
                        });
                    } else {
                                ShowMessage(message);
                                $('#btnit').prop('disabled', false);
                    }
                        }
                    }

                }
            });
        }

        function GetprintPage(DocEntry) {
            var urlpath = '@Url.Action("GetprintPage", "SalesOrderNew")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: {  },
                async: false,
                success: function (data) {
                    var dynamicURL = '';
                    var Branch = $("#ddlBranch").val();
                    if (Branch == "1015") {
                        dynamicURL = data.RPTPort + 'web/webform1.aspx?id1=4&id2=DOCENTRYID|BIOXIN&id3=2&uid=USERID'.replace('DOCENTRYID', DocEntry).replace('BIOXIN', data.Database).replace('USERID', data.UserId);
                    } else {
                        dynamicURL = data.RPTPort + 'web/webform1.aspx?id1=4&id2=DOCENTRYID|BIOXIN&id3=2&uid=USERID'.replace('DOCENTRYID', DocEntry).replace('BIOXIN', data.Database).replace('USERID', data.UserId);
                    }
                    window.open(dynamicURL, '_blank');
                }
                //,
                //complete: function (data) {

                //}
            });
        }
        function SaveValidation() {
            var isValid = true;
            var message = "Some Values Required";

            if ($('#txtDocDate').val() == '' || $('#txtDocDate').val() == null) {
                ValidationColorChangeNew("txtDocDate", "divDocDate", "Posting Date Required", false);
                isValid = false;
            }
            if ($('#ddlFromWarehouse').val() == 0 || $('#ddlFromWarehouse').val() == '') {
                ValidationColorChangeNew("ddlFromWarehouse", "divFromWarehouse", "From Warehouse Required", true);
                isValid = false;
            }
            if ($('#ddlToWarehouse').val() == 0 || $('#ddlToWarehouse').val() == '') {
                ValidationColorChangeNew("ddlToWarehouse", "divToWarehouse", "To Warehouse Required", true);
                isValid = false;
            }
            //Items Required
            if ($('#salesOrder tbody tr').length == 0 || $('#salesOrder tbody tr').length == '') {
                isValid = false;
                message = "Item Required";
            }

            $('#salesOrder tbody tr').each(function() {
                var idr = $(this).attr('id');
                var id = idr.substring(3);

                var qty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
                var price = isNaN(parseFloat($('#price_' + id).val())) ? 0 : parseFloat($('#price_' + id).val());
                //var lTotal = isNaN(parseFloat($('#total_' + id).val())) ? 0 : parseFloat($('#total_' + id).val());
                var itemCode = $('#itemCode_' + id).val()


                var batchNumberEnable = $("#batchNumberEnable_" + id).val();
                var serialNumberEnable = $("#serialNumberEnable_" + id).val();

                if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
                    if ($('#dynamic' + id).length) {

                    } else {
                        isValid = false;
                        message = "Please add batche " + itemCode;
                        return;
                    }
                    var batchesTotal = 0;
                    $("#batchesItem" + id + " tbody tr").each(function (key, value) {
                        debugger;
                        var soId = $(this).prop("id");
                        var batchQty = isNaN(parseFloat($('#batchQuantity_' + id + soId).val())) ? 0 : parseFloat($('#batchQuantity_' + id + soId).val());
                        batchesTotal += batchQty;
                    });
                    if (qty < batchesTotal) {
                        isValid = false;
                        message = "Batches Total Quantity can't be greater than Item Quantity";
                        return;
                    }
                }

                if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
                    if ($('#dynamic' + id).length) {

                    } else {
                        isValid = false;
                        message = "Please add serial" + itemCode;
                        return;
                    }
                    var serialTotal = 0;
                    $("#serialItem" + id + " tbody tr").each(function (key, value) {
                        soId = $(this).prop("id");
                        if ($('#chk_' + id + soId).is(":checked")) {
                            debugger;
                            var serialQty = isNaN(parseFloat($('#serialStock_' + id + soId).val())) ? 0 : parseFloat($('#serialStock_' + id + soId).val());
                            serialTotal += serialQty;
                        }
                    });

                    if (qty < serialTotal) {
                        isValid = false;
                        message = "Serial Total Quantity can't be greater than Item Quantity";
                           return;
                    }
                    if (qty > serialTotal) {
                        isValid = false;
                        message = "Item Quantity  can't be greater than Serial Total Quantity";
                           return;
                    }
                }

                if (itemCode === '' || itemCode === null) {
                    isValid = false;
                    message = "Please Select Item";
                    $('#itemCode_' + id).css('border-bottom', '2px solid red');
                    return;
                }

                if (qty === 0) {
                    isValid = false;
                    message = "Qty Cannot be 0 ";
                    $('#quantity_' + id).css('border-bottom', '2px solid red');
                    return;
                }
            });
            if (isValid == false) {
                ShowMessage(message);
            }
            return isValid;
        }
        function RemoveRow(id) {
            debugger;
            var trLength = $('#salesOrder tbody tr').length;
            if (trLength >= 1) {
                $('#tr_' + id).remove();
                SerialTable();
            } else {
                return;
            }
        }
        function AddItemRow(itemCode) {
            var tr = $('#salesOrder tbody tr').length + 1;
            var values = $("#salesOrder tbody tr")
                .map(function() { return parseInt($(this).attr('id').substring(3)); }).get();
            var index = values.indexOf(tr);
            if (index >= 0) {
                tr = Math.max.apply(Math, values) + 1;
            }
            var urlpath = '@Url.Action("AddRowForOrder", "InventoryTransfer")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'html',
                data: { tr: tr },
                async: false,
                success: function(data) {
                    $('#salesOrder tbody').append(data);
                    GetItemDetails(itemCode, tr)
                    //LoadItemInRow("itemCode_" + tr);
                    //LoadItemCodeInRow("itemCodeName_" + tr);
                    //LoadFromWarehouseInRow("fromWH_" + tr);
                    //LoadToWarehouseInRow("toWH_" + tr);
                }
            });
            //$('#itemCode_' + tr).select2();
            //$('#itemCodeName_' + tr).select2();
            //$('#fromWH_' + tr).select2();
            //$('#toWH_' + tr).select2();
            SerialTable();
            //CalculateAll();
        }

           function AddRow() {
            var tr = $('#salesOrder tbody tr').length + 1;
            var values = $("#salesOrder tbody tr")
                .map(function() { return parseInt($(this).attr('id').substring(3)); }).get();
            var index = values.indexOf(tr);
            if (index >= 0) {
                tr = Math.max.apply(Math, values) + 1;
            }
            var urlpath = '@Url.Action("AddRowForOrder", "InventoryTransfer")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'html',
                data: { tr: tr },
                async: false,
                success: function(data) {
                    $('#salesOrder tbody').append(data);
                 /*   GetItemDetails(itemCode, tr)*/
                    //LoadItemInRow("itemCode_" + tr);
                    //LoadItemCodeInRow("itemCodeName_" + tr);
                    //LoadFromWarehouseInRow("fromWH_" + tr);
                    //LoadToWarehouseInRow("toWH_" + tr);
                }
            });
            //$('#itemCode_' + tr).select2();
            //$('#itemCodeName_' + tr).select2();
            //$('#fromWH_' + tr).select2();
            //$('#toWH_' + tr).select2();
            SerialTable();
            //CalculateAll();
        }
        function SerialTable() {
            $('#salesOrder tbody tr').each(function(index, element) {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                $('#ts_' + id).html(index + 1);
            });
        }
        function LoadItemCodeInRow(elementId) {
            var array = [];
            var rowCount = $('#salesOrder tbody tr').length;
            for (let count = 0; count < rowCount; count++) {
                array.push(parseInt($("#itemCodeName_" + count).val()));
            };
            $('#' + elementId + '').append("<option value=''>--Select Item--</option>");

            for (var i = 0; i < itemList.length; i++) {
                if (jQuery.inArray(itemList[i].ItemCode, array) == -1) {
                    $('#' + elementId + '').append($("<option></option>").val(itemList[i].ItemCode).html(itemList[i].ItemCode));
                    /*                    $('#' + elementId + '').append($("<option></option>").val(itemList[i].ItemCode).html(itemList[i].ItemCode + " | " + itemList[i].ItemName));*/
                }
            }
        }
        function LoadItemInRow(elementId) {
            var array = [];
            var rowCount = $('#salesOrder tbody tr').length;
            for (let count = 0; count < rowCount; count++) {
                array.push(parseInt($("#itemCode_" + count).val()));
            };
            $('#' + elementId + '').append("<option value=''>--Select Item--</option>");

            for (var i = 0; i < itemList.length; i++) {
                if (jQuery.inArray(itemList[i].ItemCode, array) == -1) {
                    $('#' + elementId + '').append($("<option></option>").val(itemList[i].ItemCode).html(itemList[i].ItemName));
/*                    $('#' + elementId + '').append($("<option></option>").val(itemList[i].ItemCode).html(itemList[i].ItemCode + " | " + itemList[i].ItemName));*/
                }
            }
        }
        function LoadFromWarehouseInRow(elementId) {
            var array = [];
            var rowCount = $('#salesOrder tbody tr').length;
            for (let count = 0; count < rowCount; count++) {
                array.push(parseInt($("#fromWH_" + count).val()));
            };
            $('#' + elementId + '').append("<option value=''>--From Warehouse--</option>");

            for (var i = 0; i < fromWarehouseList.length; i++) {
                if (jQuery.inArray(fromWarehouseList[i].WhsCode, array) == -1) {
                    $('#' + elementId + '').append($("<option></option>").val(fromWarehouseList[i].WhsCode).html(fromWarehouseList[i].WhsName));
                }
            }
        }
        function LoadToWarehouseInRow(elementId) {
            var array = [];
            var rowCount = $('#salesOrder tbody tr').length;
            for (let count = 0; count < rowCount; count++) {
                array.push(parseInt($("#toWH_" + count).val()));
            };
            $('#' + elementId + '').append("<option value=''>--To Warehouse--</option>");

            for (var i = 0; i < toWarehouseList.length; i++) {
                if (jQuery.inArray(toWarehouseList[i].WhsCode, array) == -1) {
                    $('#' + elementId + '').append($("<option></option>").val(toWarehouseList[i].WhsCode).html(toWarehouseList[i].WhsName));
                }
            }
        }
        function CancelInventoryTransfer() {
             window.location = "@Url.Action("AddInventoryTransfer", "InventoryTransfer")"
        }
        //Start Batches
        var BatchesItem = [];
        function ShowData(id) {
            ViewOrder(id);
            $("#eid").val(id);
            var itemQty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
            $(".rowBatchesQty").html(itemQty);
        }
        function ViewOrder(id) {
            var itemCode = $('#itemCode_' + id).val();
            /*    var fromWH = $('#fromWH_' + id).val() ?? "";*/
            var fromWH = $('#ddlFromWarehouse').val() ?? "";
            var urlpath = '@Url.Action("ViewBatches", "InventoryTransfer")';
            $.ajax({
                url: urlpath,
                dataType: 'html',
                data: { ItemCode: itemCode, WareHouse: fromWH, id: id},
                type: "Get",
                async: false,
                success: function (data) {
                    debugger;

                    //$("#containerDetails").append("<div id='containerDetailsRow" + id + "'></div>");
                    //$('#containerDetailsRow' + id).html(data);
                    var jsonBatchesObjs = [];
                    if ($('#dynamic' + id).length) {
                        debugger;
                        $("#batchesItem" + id + " tbody tr").each(function (key, value) {
                            debugger;
                            var BatchesObjItem = {};
                            var soId = $(this).prop("id");
                            if ($('#batchQuantity_' + id + soId).val() > 0) {
                                BatchesObjItem.VisOrder = parseInt(soId);
                                BatchesObjItem.BatchQuantity = isNaN(parseFloat($('#batchQuantity_' + id + soId).val())) ? 0 : parseFloat($('#batchQuantity_' + id + soId).val());
                                jsonBatchesObjs.push(BatchesObjItem);
                            }
                        });
                        $('#dynamic' + id).remove();
                    }

                    $("#containerDetails").append("<div id='containerDetailsRow" + id + "'></div>");
                    $('#containerDetailsRow' + id).html(data);

                    $("#batchesItem tbody tr").each(function (key, value) {
                        var soId2 = $(this).prop("id");
                        var soId2 = parseInt(soId2);
                        debugger;
                        if (jsonBatchesObjs != undefined && jsonBatchesObjs.length != 0) {
                            $.each(jsonBatchesObjs, function (key, value) {
                                debugger;
                                if (value.VisOrder == soId2) {
                                    debugger;
                                    $('#batchQuantity_' + id + soId2).val(value.BatchQuantity);
                                }
                            });
                        }
                    });




                }
            });
        }
        function RemoveBatches() {
            var rowId = parseFloat($("#eid").val());
            if ($('#containerDetailsRow' + rowId).length) {
                $('#containerDetailsRow' + rowId).remove();
            }
        }
        function AddBatches() {
            var rowId = parseFloat($("#eid").val());
            var batchNumberEnable = $("#batchNumberEnable_" + rowId).val();
            var serialNumberEnable = $("#serialNumberEnable_" + rowId).val();
            debugger;
            if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
                if (ValidationBatches() == true) {
                    const table = document.getElementById("batchesItem");
                    table.setAttribute("id", "batchesItem" + rowId);

                    $("#main").append("<div id='dynamic" + rowId + "'></div>");
                    $('#dynamic' + rowId).append($('#containerDetailsRow' + rowId));
                    //$("#showBtn_" + rowId).prop("disabled", true);
                    //$("#quantity_" + rowId).prop("disabled", true);
                    $("#showBtn_" + rowId).removeClass("btn-primary").addClass("btn-success");
                    $("#price_" + rowId).prop("disabled", true);
                } else {
                    if ($('#containerDetailsRow' + rowId).length) {
                        $('#containerDetailsRow' + rowId).remove();
                    }
                }
            }
            if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
                if (ValidationSerial() == true) {
                    const table = document.getElementById("serialItem");
                    table.setAttribute("id", "serialItem" + rowId);

                    $("#main").append("<div id='dynamic" + rowId + "'></div>");
                    $('#dynamic' + rowId).append($('#containerDetailsRow' + rowId));
                    //$("#showSerialBtn_" + rowId).prop("disabled", true);
                    //$("#quantity_" + rowId).prop("disabled", true);
                    $("#price_" + rowId).prop("disabled", true);
                } else {
                    if ($('#containerDetailsRow' + rowId).length) {
                        $('#containerDetailsRow' + rowId).remove();
                    }
                }
            }

        }
        function ValidationBatchesTotal(rowIdCount) {
            var isValid = true;
            var message = "Some Values Required";
            debugger;
            var itemRow = $('#batchRow_' + rowIdCount).val();
            var itemQty = isNaN(parseFloat($('#quantity_' + itemRow).val())) ? 0 : parseFloat($('#quantity_' + itemRow).val());

            var batchQuantity = isNaN(parseFloat($('#batchQuantity_' + rowIdCount).val())) ? 0 : parseFloat($('#batchQuantity_' + rowIdCount).val());
            var batchStock = isNaN(parseFloat($('#batchStock_' + rowIdCount).val())) ? 0 : parseFloat($('#batchStock_' + rowIdCount).val());


            if (batchStock < batchQuantity) {
                isValid = false;
                message = "Quantity can't be greater than stock";
                $('#batchQuantity_' + rowIdCount).css('border-bottom', '2px solid red');
                ShowMessage(message);
                $('#batchQuantity_' + rowIdCount).val(batchStock);
                return;
            }
            // each function does not work '#salesOrder tbody tr'
            var batchesTotal = 0;
            $('#batchesItem tbody tr').each(function () {
                var idr = $(this).attr('id');
                var batchQty =isNaN(parseFloat($('#batchQuantity_' + itemRow + idr).val())) ? 0 : parseFloat($('#batchQuantity_' + itemRow + idr).val());
                batchesTotal += batchQty;
            });

            if (itemQty < batchesTotal) {
                isValid = false;
                message = "Batches Total Quantity can't be greater than Item Quantity";
                $('#batchQuantity_' + rowIdCount).css('border-bottom', '2px solid red');
                $('#batchQuantity_' + rowIdCount).val(0);
                ShowMessage(message);
                return;
            }


        }
        function ValidationBatches() {
            debugger;
            var isValid = true;
            var message = "Some Values Required";
            var rowId = parseFloat($("#eid").val());
            var itemQty = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());
            var batchesTotal = 0;
            $('#batchesItem tbody tr').each(function () {
                var idr = $(this).attr('id');
                var batchQty = isNaN(parseFloat($('#batchQuantity_' + rowId + idr).val())) ? 0 : parseFloat($('#batchQuantity_' + rowId + idr).val());
                batchesTotal += batchQty;
            });

            if (itemQty != batchesTotal) {
                isValid = false;
                message = "Batches Total Quantity must be equal to Item Quantity";
            }
            if (batchesTotal == 0) {
                isValid = false;
                message = "Batches Total Quantity can't be Zero";
            }

            if (isValid == false) {
                ShowMessage(message);
            }
            return isValid;
        }
        //End Batches
        //Start Serial
        function ShowSerialData(id) {
            ViewSerial(id);
            $("#eid").val(id);
            var itemQty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
            $(".rowSerialQty").html(itemQty);
        }
        function ViewSerial(id) {
            var itemCode = $('#itemCode_' + id).val();
            /*    var fromWH = $('#fromWH_' + id).val() ?? "";*/
            var fromWH = $('#ddlFromWarehouse').val() ?? "";
            var urlpath = '@Url.Action("ViewSerial", "InventoryTransfer")';
            $.ajax({
                url: urlpath,
                dataType: 'html',
                data: { ItemCode: itemCode, WareHouse: fromWH, id: id},
                type: "Get",
                async: false,
                success: function (data) {
                    debugger;
                    //const divrow = document.getElementById("containerDetailsRow");
                    //divrow.setAttribute("id", "containerDetailsRow" + id);
                    $("#containerDetails").append("<div id='containerDetailsRow" + id + "'></div>");
                    $('#containerDetailsRow' + id).html(data);
                }
            });
        }
        function ValidationSerial() {
            debugger;
            var isValid = true;
            var message = "Some Values Required";
            var rowId = parseFloat($("#eid").val());
            var itemQty = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());

            var checked = $('#tbodyid input:checked').length > 0;
            if (!checked) {
                isValid = false;
                message = "Check at least one checkbox";
            }

            var batchesTotal = 0;
            $('#serialItem tbody tr').each(function (key, value) {
                soId = $(this).prop("id");
                if ($('#chk_' + rowId + soId).is(":checked")) {
                    debugger;
                    var batchQty = isNaN(parseFloat($('#serialStock_' + rowId + soId).val())) ? 0 : parseFloat($('#serialStock_' + rowId + soId).val());
                    batchesTotal += batchQty;
                }
            });

            if (itemQty < batchesTotal) {
                isValid = false;
                message = "Serial Total Quantity can't be greater than Item Quantity";
             /*   return;*/
            }
            if (itemQty > batchesTotal) {
                isValid = false;
                message = "Item Quantity  can't be greater than Serial Total Quantity";
             /*   return;*/
            }

            if (isValid == false) {
                ShowMessage(message);
            }
            return isValid;
        }
    </script>
}