
@{
    ViewBag.Title = "Exchange Invoice";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .custom-header {
        background-color: darkgray !important; /* Blue color #007bff  #808080*/
        color: black; /* Text color for contrast */
    }

    .blue-checkbox {
        color: blue !important;
    }

    .spinnermodal {
        background-color: #FFFFFF;
        height: 100%;
        left: 0;
        opacity: 0.5;
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 100000;
    }
</style>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header custom-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h3 class="card-title">
                                    <span class="" style="color:black"><b>Exchange Invoice</b></span>
                                </h3>
                            </div>
                            <div class="col-md-6 text-right">
                                <a class="btn btn-outline-warning" href="@Url.Action("Index", "SalesInvoice")">
                                    <span class="fa fa-list"></span> Sales Invoice Home
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group row" id="divType">
                                    <label for="ddlType" class="col-md-4 control-label">Type</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width:100%;" id="ddlType" disabled>
                                            @*<option value="0">--Select Type--</option>*@
                                            <option value="I">Item</option>
                                            <option value="S">Service</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divCustomer">
                                    <label for="ddlCustomer" class="col-md-4 control-label">Code</label>
                                    <div class="col-md-6">
                                        <input type="text" id="ddlCustomer" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divCustomerName">
                                    <label for="txtCustomerName" class="col-md-4 control-label">Customer Name</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtCustomerName" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divMobileNo">
                                    <label for="txtMobileNo" class="col-md-4 control-label">Mobile No</label>
                                    <div class="col-md-6">
                                        <input type="text" id="ddlMobileNo" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                              
                            </div>
                            <div class="col-md-4">


                            </div>
                            <div class="col-md-4">
                                <div class="form-group row" id="divDocumentNo">
                                    <label for="txtDocumentNo" class="col-md-4 control-label">Document No</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtDocumentNo" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divStatus">
                                    <label for="txtStatus" class="col-md-4 control-label">Status</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtStatus" class="form-control" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divDocDate">
                                    <label for="txtDocDate" class="col-md-4 control-label">Posting Date</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtDocDate" class="form-control datepicker" value="@DateTime.Now.ToString("dd-MMM-yyyy")" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divDocDueDate">
                                    <label for="txtDocDueDate" class="col-md-4 control-label">Delivery Date</label>
                                    <div class="col-md-6">
                                        <input type="text" id="txtDocDueDate" class="form-control" value="@DateTime.Now.ToString("dd-MMM-yyyy")" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divToBranch">
                                    <label for="ddlBranch" class="col-md-4 control-label">Service Branch</label>
                                    <div class="col-md-6">
                                        <select class="form-control select2" style="width: 100%; text-align: center" id="ddlToBranch" disabled="disabled"></select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            &nbsp;
                        </div>
                        <div class="row table-responsive">
                            <table class="table table-bordered table-striped table-hover" id="exExchangeItem">
                                <thead>
                                    <tr style="background-color: lightgrey">
                                        <th class="action">Action</th>
                                        <th>#</th>
                                        <th>Code</th>
                                        <th>Name</th>
                                        <th>Qty</th>
                                        <th>Return Qty</th>
                                        <th>UOM</th>
                                        <th>Price</th>
                                        <th>Disc%</th>
                                        <th>Discount</th>
                                        <th>Vat</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group row mt-3" id="divSearchItemCode">
                                    <label for="txtCustomerName" class="col-md-4 control-label">Item Code</label>
                                    <div class="col-md-8">
                                        <input type="text" placeholder="Search Item Code" id="txtSearchItemCode" class="form-control" autocomplete="off" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group row mt-3" id="divSearchItemName">
                                    <label for="txtCustomerName" class="col-md-4 control-label">Item Name</label>
                                    <div class="col-md-8">
                                        <input type="text" placeholder="Search Item Name" id="txtSearchItemName" class="form-control" autocomplete="off" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3"></div>
                            <div class="col-md-3">
                                <div class="form-group row mt-1" id="divExExchangeTotalBalance">
                                    <label for="txtExExchangeTotalBalance" class="col-md-5 control-label">Total Balance</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtExExchangeTotalBalance" disabled="disabled" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            &nbsp;
                        </div>
                        <div class="row table-responsive">
                            <table class="table table-bordered table-striped table-hover" id="salesOrder">
                                <thead>
                                    <tr style="background-color: lightgrey">
                                        <th class="action">Action</th>
                                        <th>#</th>
                                        <th>Code</th>
                                        <th>Name</th>
                                        <th>Qty</th>
                                        <th>UOM</th>
                                        <th>Stock</th>
                                        <th>Price</th>
                                        <th>Batch</th>
                                        <th>Disc%</th>
                                        <th>Discount</th>
                                        <th>Vat</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="row">
                            <div class="col-md-9">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group row mt-3" id="divSalesEmployee">
                                            <label for="lblRestAmount" class="col-md-5 control-label">Sales Employee</label>
                                            <div class="col-md-7">
                                                <select class="form-control select2" style="width: 100%;" id="ddlSalesEmployee"></select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group row mt-3" id="divRrmarks">
                                            <label for="taxVat" class="col-md-5 control-label">Remarks</label>
                                            <div class="col-md-6">
                                                <textarea id="txtRrmarks" name="w3review" rows="2" cols="30" style="border: 1px solid #ced4da; border-radius: 4px "></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row table-responsive mt-3">
                                            <table class="table table-bordered table-striped table-hover" id="paymentMode">
                                                <thead>
                                                    <tr style="background-color: lightgrey">
                                                        <th>Mode</th>
                                                        <th>Account</th>
                                                        <th>Voucher</th>
                                                        <th>V. Amount</th>
                                                        <th>Amount</th>
                                                        <th>TransID</th>
                                                        <th>CardNo</th>
                                                        <th class="action">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group row mt-3" id="divTotalBeforeTax">
                                    <label for="txtTotalBeforeTax" class="col-md-5 control-label">Total Before Disc</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtTotalBeforeTax" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divDiscount">
                                    <label for="txtDiscount" class="col-md-5 control-label">Discount</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtDiscount" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divTax">
                                    <label for="txtTax" class="col-md-5 control-label">Vat</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtTax" disabled="disabled" />
                                    </div>
                                </div>

                                <div class="form-group row mt-1" id="divTotalBalance">
                                    <label for="txtTotalBalance" class="col-md-5 control-label">Total Balance</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtTotalBalance" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divRemainingBalance">
                                    <label for="txtTotalBalance" class="col-md-5 control-label">Remaining Balance</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtRemainingBalanceBalance" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divTotalPaid">
                                    <label for="txtTotalPaid" class="col-md-5 control-label">Total Paid</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtTotalPaid" disabled="disabled" />
                                    </div>
                                </div>
                                <div class="form-group row mt-1" id="divTotalDue">
                                    <label for="txtTotalBeforeTax" class="col-md-5 control-label">Total Due</label>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control" id="txtTotalDue" disabled="disabled" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-footer">
                        <button class="btn btn-warning" id="btnExchangeSi" onclick="SaveExchangeInvoice()">Add & New</button>
                        <button class="btn btn-warning  float-right" onclick="location.reload()">Clear</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div id="main" style="display:none"></div>
        </div>
        <input id="exchangeInvoiceId" type="number" style="display: none;" value="@ViewBag.ExchangeInvoiceId">
        <input id="codeId" type="number" style="display: none;">
        <input id="branch" type="number" style="display: none;" value="@ViewBag.Branch">
        <input id="userId" type="text" style="display: none;" value="@ViewBag.UserId">
        <input id="eflag" type="text" style="display: none;" value="@ViewBag.eflag">
    </div>
    <div class="spinnermodal" id="testSpan" style="display: none; z-index: 10001">
        <div style="position: fixed; z-index: 10001; top: 50%; left: 50%; height:50px">
            <img src="~/AssetStatic/img/loading_spinner.gif" />
        </div>
    </div>
</section>


<div class="modal fade" tabindex="-1" id="batchModal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 50% !important">
        <div class="modal-content">
            <div class="modal-header">

            </div>
            <div class="modal-body" id="containerDetails">
                <section class="content">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="card card-primary">
                                    <div class="card-header custom-header">
                                        <div class="col-md-6">
                                            <div class="form-group row">
                                                <label for="lblRestAmount" class="col-md-5 control-label"><b>Batches</b> Quantity :</label>
                                                <div class="col-md-2">
                                                    <span class="rowBatchesQty"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="row table-responsive">
                                            <table class="table table-bordered table-striped table-hover" id="batchesItem">
                                                <thead>
                                                    <tr style="background-color: aliceblue">
                                                        <th style="text-align:center">#</th>
                                                        <th style="text-align:center">Item</th>
                                                        <th style="text-align:center">Bacthes Name</th>
                                                        <th style="text-align:center">Ex Date</th>
                                                        <th style="text-align:center">In Date</th>
                                                        <th style="text-align:center">Stock</th>
                                                        <th style="text-align:center">Batch Qty</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="batchRows">
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
            <div class="modal-footer">
                <input type="text" style="display:none;" id="eid" />
                <button class="btn btn-danger" data-bs-target="#viewModal" data-bs-toggle="modal" data-bs-dismiss="modal" onclick="CloseBatches()">Close</button>
                @*<button type="button" id="batchesClose" data-dismiss="modal" style="display: none">Close</button>*@
                <button class="btn btn-primary" data-bs-target="#viewModal" data-bs-toggle="modal" data-bs-dismiss="modal" id="batchesSave" onclick="AddBatches()">Save</button>
            </div>
        </div>
    </div>
</div>

<!--<div class="modal fade" tabindex="-1" id="viewModal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 50% !important">
        <div class="modal-content">
            <div class="modal-header">

            </div>
            <div class="modal-body" id="containerDetails">-->
                @*<div id="containerDetailsRow">

                    </div>*@
            <!--</div>
            <div class="modal-footer">
                <input type="text" style="display:none;" id="eid" />
                <button class="btn btn-primary" data-bs-target="#viewModal" data-bs-toggle="modal" data-bs-dismiss="modal" onclick="CloseBatches()">Close</button>-->
                @*<button type="button" id="batchesClose" data-dismiss="modal" style="display: none">Close</button>*@
                <!--<button class="btn btn-primary" data-bs-target="#viewModal" data-bs-toggle="modal" data-bs-dismiss="modal" id="batchesSave" onclick="AddBatches()">Save</button>
            </div>
        </div>
    </div>
</div>-->

@section Scripts
{
    <script>
        var itemList = {};
        var modeList = {};
        var srcount = 0;

        let ItemBatches = [];
        let itemBatchSelected = [];

        $(document).ready(function () {
            var exchangeInvoiceId = $('#exchangeInvoiceId').val();
            if (exchangeInvoiceId != "" && exchangeInvoiceId != null) {
                GetSalesInvoice(exchangeInvoiceId);
            }
            var Type = $('#ddlType').val();
            if (Type == 'I') {
                $('#txtSearchItemCode').prop('disabled', false);
                /*        $('#ddlCopyFrom').prop('disabled', true);*/
            }
            if (Type == 'S') {
                $('#txtSearchItemCode').prop('disabled', true);
                /*       $('#ddlCopyFrom').prop('disabled', false);*/
            }

            LoadDate_C('#txtDocDate');
            LoadDate_C('#txtDocDueDate');
            $('#divDocDueDate').hide();

            LoadSalesEmployee('ddlSalesEmployee');
            LoadBranch('ddlBranch');
            LoadBranch('ddlToBranch');
            GetWarehouses('ddlFromWarehouse');
            var branch = $('#branch').val();
            $("#ddlBranch").val(branch).trigger('change');
            $("#ddlToBranch").val(branch).trigger('change');

            GetPaymentMode();
            AddPaymentModeRow();
            $("#txtSearchItemCode").autocomplete({
                source: function (request, response) {
                    debugger;
                    var _url = '';
                    var type = $("#ddlType").val();
                    if (type == "I") {
                        _url = '@Url.Action("AutoCompleteItem", "SalesOrderNew")';
                    }
                    if (type == "S") {
                        _url = '@Url.Action("AutoCompleteService", "SalesOrderNew")';
                    }

                $.ajax({
                    url: _url,
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        debugger;
                           if (data.UnAutorized == 1) {
                            window.location.href = '@Url.Action("Logout", "Home")';
                           } else {
                            if (data.dataList[0].ReturnCode == "-99999") {
                                window.location.href = '@Url.Action("Logout", "Home")';
                            } else {
                                response($.map(data.dataList, function (item) {
                                    return item.ItemCode + " | " + item.ItemName;
                                }));
                            }
                          }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (event, ui) {
                debugger;
                var str = ui.item.value;
                var ret2 = str.replace(" | ", '|');
                var ret = ret2.split('|');
                var itemCode = ret[0];
                var itemName = ret[1];
                AddItemRow(itemCode);
                },
                minLength: 3
                , close: function (event, ui) {
                    debugger;
                    $("#txtSearchItemCode").val("");
                }
            });
            $("#txtSearchItemName").autocomplete({
                source: function (request, response) {
                    debugger;
                    var _url = '';
                    var type = $("#ddlType").val();
                    if (type == "I") {
                        _url = '@Url.Action("AutoCompleteItemName", "SalesOrderNew")';
                    }
                    if (type == "S") {
                        _url = '@Url.Action("AutoCompleteService", "SalesOrderNew")';
                    }

                $.ajax({
                    url: _url,
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                           if (data.UnAutorized == 1) {
                            window.location.href = '@Url.Action("Logout", "Home")';
                           } else {
                            if (data.dataList[0].ReturnCode == "-99999") {
                                window.location.href = '@Url.Action("Logout", "Home")';
                            } else {
                                response($.map(data.dataList, function (item) {
                                    return item.ItemCode + " | " + item.ItemName;
                                }));
                            }
                          }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (event, ui) {
                debugger;
                var str = ui.item.value;
                var ret2 = str.replace(" | ", '|');
                var ret = ret2.split('|');
                var itemCode = ret[0];
                var itemName = ret[1];
                AddItemRow(itemCode);
                },
                minLength: 3
                , close: function (event, ui) {
                    debugger;
                    $("#txtSearchItemName").val("");
                }
            });
        });

        function GetSalesInvoice(DocEntry) {
            var docEntry = DocEntry.toString();
            var urlpath = '@Url.Action("SalesExchangeViewData", "SalesInvoice")';
            $.ajax({
                data: { DocEntry: docEntry },
                url: urlpath,
                dataType: 'json',
                type: "Get",
                /*   async: false,*/
                beforeSend: function () {
                    $('#testSpan').show();
                },
                success: function (data) {
                    $('#testSpan').hide();
                    if (data.UnAutorized == 0 && data.ReturnCode != null ) {
                        if (data.ReturnCode == "-99999") {
                            window.location.href = '@Url.Action("Logout", "Home")';
                        }
                    }

                    if (data.UnAutorized == 1) {
                        window.location.href = '@Url.Action("Logout", "Home")';
                    } else {
                            $("#ddlCustomer").val(data.CardCode);
                            $('#txtCustomerName').val(data.CardName);
                            $("#ddlMobileNo").val(data.Mobile);
                            LoadBranch('ddlBranch');
                            $("#ddlBranch").val(data.BranchCode);
                            $('#txtDocumentNo').val(data.SAPDocNum);
                            $('#txtStatus').val(data.DocStatusDesc);

                            let docDueDateUpdated = (data.DocDueDate != '') ? DateConversionToDateMonthYear(data.DocDueDate) : '';
                            $('#txtDocDueDate').val(docDueDateUpdated);

                            LoadSalesEmployee('ddlSalesEmployee');
                            $("#ddlSalesEmployee").val(data.SalesEmployeeCode).trigger('change');
                            $('#txtRrmarks').val(data.Remarks);

                            for (var i = 0; i < data.itemsViewModels.length; i++) {

                                var tr = $('#exExchangeItem tbody tr').length + 100;
                                AddExExchangeRow();
                                $("#itemCodeEx_" + tr).val(data.itemsViewModels[i].ItemCode);
                                $('#itemNameEx_' + tr).val(data.itemsViewModels[i].ItemName);
                                $('#uomEx_' + tr).val(data.itemsViewModels[i].unitMsr);
                                $('#quantityEx_' + tr).val(data.itemsViewModels[i].Quantity);
                                $('#priceEx_' + tr).val(data.itemsViewModels[i].Price);


                                $("#discountEx_" + tr).val(data.itemsViewModels[i].DiscountPercentage);
                                $("#taxcodeEx_" + tr).val(data.itemsViewModels[i].TaxCode);
                                $("#taxrateEx_" + tr).val(data.itemsViewModels[i].TaxRate);
                                //$("#taxamount_" + tr).val(data.itemsViewModels[i].OpenQty);
                                let DiscountAmountUpdated = Math.abs(data.itemsViewModels[i].DiscountAmount);
                                $("#discountamountEx_" + tr).val(DiscountAmountUpdated);
                         /*       $("#totalEx_" + tr).val();*/
                                /*       $("#stock_" + tr).val(data.itemsViewModels[i].Stock);*/
                                let deliverydateUpdated = (data.itemsViewModels[i].DeliveryDate != null) ? DateConversionToDateMonthYear(data.itemsViewModels[i].DeliveryDate) : '';
                                $("#deliverydateEx_" + tr).val(deliverydateUpdated);
                                $("#totalbeforetaxEx_" + tr).val();
                                $("#warehouseEx_" + tr).val(data.itemsViewModels[i].WhsCode);
                                var LineTotal = ((data.itemsViewModels[i].Quantity * data.itemsViewModels[i].Price) - DiscountAmountUpdated);
                                $('#totalEx_' + tr).val(LineTotal);

                                $('#docEntryEx_' + tr).val(data.itemsViewModels[i].DocEntry);
                                $('#visOrderEx_' + tr).val(data.itemsViewModels[i].VisOrder);
                                $('#lineNumEx_' + tr).val(data.itemsViewModels[i].LineNum);
                                $('#objTypeEx_' + tr).val(data.itemsViewModels[i].ObjType);
                                $('#lineStatusEx_' + tr).val(data.itemsViewModels[i].LineStatus);

                                //LineCalculation(tr);
                            }
                    }



                }
            });
        }
        function AddLineCalculation(rowId) {
            var rowChkClicked = $("#chk_" + rowId).prop("checked");
            if (rowChkClicked) {
                debugger;
                $('#returnQtyEx_' + rowId).prop("disabled", false);
                TotalLineCalculationWithCheckbox();
            } else {
                TotalLineCalculationWithCheckbox();
            }
        }
        function TotalLineCalculationWithCheckbox() {
            var TotalBalance = 0;
            $('#txtExExchangeTotalBalance').val('');
            $('#exExchangeItem tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var rowChkExist = $("#chk_" + id).prop("checked");
                if (rowChkExist) {
                    debugger;
                    var returnQty = isNaN(parseFloat($('#returnQtyEx_' + id).val())) ? 0 : parseFloat($('#returnQtyEx_' + id).val());
                    var priceEx = isNaN(parseFloat($('#priceEx_' + id).val())) ? 0 : parseFloat($('#priceEx_' + id).val());
                    var total = returnQty * priceEx;
                    TotalBalance += total;
                }
            });
            $('#txtExExchangeTotalBalance').val(TotalBalance);
        }
        function LineRetuneTotal(rowId) {
            var rowChkClicked = $("#chk_" + rowId).prop("checked");
            if (rowChkClicked) {
                debugger;
                /*   $('#returnQtyEx_' + rowId).prop("disabled", false);*/
                var Qty = isNaN(parseFloat($('#quantityEx_' + rowId).val())) ? 0 : parseFloat($('#quantityEx_' + rowId).val());
                var returnQty = isNaN(parseFloat($('#returnQtyEx_' + rowId).val())) ? 0 : parseFloat($('#returnQtyEx_' + rowId).val());
                if (returnQty > Qty) {
                    var message = "Return Quantity can't gather then Quantity";
                    ShowMessage(message);
                    $('#returnQtyEx_' + rowId).val(Qty);
                }
                TotalLineCalculationWithCheckbox();
            } else {
                TotalLineCalculationWithCheckbox();
            }
        }

        function AddExExchangeRow() {
            var tr = $('#exExchangeItem tbody tr').length + 100;
            var values = $("#exExchangeItem tbody tr")
                .map(function() { return parseInt($(this).attr('id').substring(3)); }).get();
            var index = values.indexOf(tr);
            if (index >= 0) {
                tr = Math.max.apply(Math, values) + 1;
            }
            var urlpath = '@Url.Action("AddRowForExchange", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'html',
                data: { tr: tr },
                async: false,
                success: function(data) {
                    $('#exExchangeItem tbody').append(data);
                    LoadDate_C('#deliverydateEx_' + tr);
                    GetWarehouses('warehouseEx_' + tr);
                }
            });
            SerialTableExchange();
        }
        function SerialTableExchange() {
            $('#exExchangeItem tbody tr').each(function (index, element) {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                $('#ts_' + id).html(index + 1);
            });
        }
        function GetWarehouses(elementId) {
            var urlpath = '@Url.Action("GetWarehouseRow", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: {  },
                async: false,
                success: function(data) {
                    $('#' + elementId + '').empty();
             /*       $('#' + elementId + '').append("<option value=''>--Select Warehouse--</option>");*/
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].WhsCode).html(data[i].WhsName));
                        //if (data[i].BuisnessUnitCode == $("#ddlToBranch").val()) {
                        //    $('#' + elementId + '').append($("<option selected='selected'></option>").val(data[i].WhsCode).html(data[i].WhsName));  //.attr("selected", "selected").trigger('change');
                        //} else {
                        //    $('#' + elementId + '').append($("<option></option>").val(data[i].WhsCode).html(data[i].WhsName));
                        //}
                    }
                }
            });
        }
        function LoadSalesEmployee(elementId) {
            var urlpath = '@Url.Action("GetSalesEmployee", "SalesOrderNew")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: {},
                async: false,
                success: function(data) {
                    $('#' + elementId + '').empty();
                    /*$('#' + elementId + '').append("<option value='0'>--Select Customer--</option>");*/
                    for (var i = 0; i < data.length; i++) {
                        $('#' + elementId + '').append($("<option></option>").val(data[i].SlpCode).html(data[i].SlpName));
                    }
                }
            });
        }

        function PaymentAmountCal(rowId) {
            var totalBalance = isNaN(parseFloat($('#txtRemainingBalanceBalance').val())) ? 0 : parseFloat($('#txtRemainingBalanceBalance').val());
            var rowTotalAmount = 0;
            $('#paymentMode tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var rowAmount = isNaN(parseFloat($('#amount_' + id).val())) ? 0 : parseFloat($('#amount_' + id).val());
                rowTotalAmount += rowAmount;
            });
            var lastAmount = totalBalance - rowTotalAmount; //(cashAmount + rowTotalAmount);
            if (lastAmount > 0) {
                $('#amount_' + rowId).val(lastAmount);
            }



            //After Click event paid amount calculation

            var rowPaidAmount = 0;
            $('#paymentMode tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var rowAmount = isNaN(parseFloat($('#amount_' + id).val())) ? 0 : parseFloat($('#amount_' + id).val());
                rowPaidAmount += rowAmount;
            });

            $('#txtTotalPaid').val(rowPaidAmount);
            var totalDue = totalBalance - rowPaidAmount;
            $('#txtTotalDue').val(totalDue);

        }
        function CalculateTotalPaid() {
            var totalBalance = isNaN(parseFloat($('#txtRemainingBalanceBalance').val())) ? 0 : parseFloat($('#txtRemainingBalanceBalance').val());
            var rowTotalAmount = 0;
            $('#paymentMode tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var rowAmount = isNaN(parseFloat($('#amount_' + id).val())) ? 0 : parseFloat($('#amount_' + id).val());
                rowTotalAmount += rowAmount;
            });
           // var paidAmount = cashAmount + rowTotalAmount;
            $('#txtTotalPaid').val(rowTotalAmount);
            var totalDue = totalBalance - rowTotalAmount;
            $('#txtTotalDue').val(totalDue);
        }
        function LoadBranch(elementId) {
            var CardType = "C";
            var urlpath = '@Url.Action("GetBranch", "SalesOrderNew")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: { },
                async: false,
                success: function (data) {
                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append("<option value='0'>--Select Branch--</option>");
                    for (var i = 0; i < data.length; i++) {

                        $('#' + elementId + '').append($("<option></option>").val(data[i].PrcCode).html(data[i].PrcName));
                    }

                }
            });
        }

        function AddItemRow(itemCode) {
            var tr = $('#salesOrder tbody tr').length + 1;
            var values = $("#salesOrder tbody tr")
                .map(function() { return parseInt($(this).attr('id').substring(3)); }).get();
            var index = values.indexOf(tr);
            if (index >= 0) {
                tr = Math.max.apply(Math, values) + 1;
            }
            var urlpath = '@Url.Action("AddRowForNewExchange", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'html',
                data: { tr: tr },
                async: false,
                success: function (data) {
                    $('#salesOrder tbody').append(data);
                    GetItemDetails(itemCode, tr)
                    LoadDate_C('#deliverydate_' + tr);
                    //GetWarehouses('warehouse_' + tr);
                }
            });
            //SerialTable();
        }
        function GetItemDetails(itemCode,rowId) {
            var CardCode = $('#ddlCustomer').val();
            var HappyHrs = 'N';

            //var urlpath = '@Url.Action("GetItemByItemCodeCardCode", "SalesOrderNew")';
            var urlpath = `@Url.Action("GetItemByItemCodeCardCode", "SalesInvoice")?ItemCode=${itemCode}&CardCode=${CardCode}&HappyHrs=${HappyHrs}`;
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'json',
                async: false,
                success: function ({ ItemDetails, Batches, Warehouses }) {

                    const data = ItemDetails;
                    //save item batches
                    ItemBatches[itemCode] = Batches;

                    $("#itemCode_" + rowId).val(data.ItemCode);
                    $("#itemName_" + rowId).val(data.ItemName);
                    $("#uom_" + rowId).val(data.InventoryUOM);
                    $("#price_" + rowId).val(data.Price);
                    $("#discount_" + rowId).val(data.Discount);
                    $("#taxcode_" + rowId).val(data.TaxCode);
                    $("#taxrate_" + rowId).val(data.TaxRate);
                    $("#taxamount_" + rowId).val('');
                    $("#discountamount_" + rowId).val('');
                    $("#total_" + rowId).val('');
                    $("#stock_" + rowId).val(data.Stock);
                    $("#batchNumberEnable_" + rowId).val(data.BatchNumberEnable);
                    $("#serialNumberEnable_" + rowId).val(data.SerialNumberEnable);
                    if (data.BatchNumberEnable == "Y") {
                        $("#showBatchBtn_" + rowId).css("display", "block");
                        $("#showSerialBtn_" + rowId).css("display", "none");
                    }
                    if (data.SerialNumberEnable == "Y") {
                        $("#showBatchBtn_" + rowId).css("display", "none");
                        $("#showSerialBtn_" + rowId).css("display", "block");
                    }

                    if (data.VoucherItem == "Y") {
                        $(".voucherSales").show();
                        $("#voucherSalesNoLine_" + rowId).show();
                        $("#voucherValidDateLine_" + rowId).show();
                        $('#voucherSalesNo_' + rowId).prop("disabled", false);
                        $('#voucherValidDate_' + rowId).prop("disabled", false);
                        $('#quantity_' + rowId).prop("disabled", true);
                        $('#voucherItemLine_' + rowId).val(data.VoucherItem)
                    } else {
                        $(".voucherSales").show();
                            $("#voucherSalesNoLine_" + rowId).show();
                            $("#voucherValidDateLine_" + rowId).show();
                            $('#voucherSalesNo_' + rowId).prop("disabled", true);
                        $('#voucherValidDate_' + rowId).prop("disabled", true);
                        $('#quantity_' + rowId).prop("disabled", false);
                    }

                    LineCalculation(rowId);
                    bindWarehouseDropdown('#warehouse_' + rowId, Warehouses);
                }
            });
        }
        function CalculateLineTotal(rowId) {
            var quantity = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());
            var price = isNaN(parseFloat($('#price_' + rowId).val())) ? 0 : parseFloat($('#price_' + rowId).val());
            var total = quantity * price;
        }
        function LineCalculation(rowId) {

            var quantity = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());
            var price = isNaN(parseFloat($('#price_' + rowId).val())) ? 0 : parseFloat($('#price_' + rowId).val());
            var discount = isNaN(parseFloat($('#discount_' + rowId).val())) ? 0 : parseFloat($('#discount_' + rowId).val());
            var taxrate = isNaN(parseFloat($('#taxrate_' + rowId).val())) ? 0 : parseFloat($('#taxrate_' + rowId).val());

            var totalBeforeTax = (quantity * price);
            $('#totalbeforetax_' + rowId).val(totalBeforeTax.toFixed(2));

            var discountAmount = (quantity * price) * (discount / 100);
            $('#discountamount_' + rowId).val(discountAmount.toFixed(2));

            var taxAmount = ((quantity * price) - discountAmount) * (taxrate / 100);
            $('#taxamount_' + rowId).val(taxAmount.toFixed(2));

            var total = (quantity * price) + taxAmount - discountAmount;
            $('#total_' + rowId).val(total.toFixed(2));

            TotalLineCalculation();
        }
        function TotalLineCalculation() {
            var TotalBeforeTax = 0;
            var TotalTax = 0;
            var TotalDiscount = 0;
            var TotalBalance = 0;
            var RemainingBalance = 0;

            $('#salesOrder tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);

                var totalBeforeTax_ = isNaN(parseFloat($('#totalbeforetax_' + id).val())) ? 0 : parseFloat($('#totalbeforetax_' + id).val());
                var totalTaxAmount_ = isNaN(parseFloat($('#taxamount_' + id).val())) ? 0 : parseFloat($('#taxamount_' + id).val());
                var totalDiscountAmount_ = isNaN(parseFloat($('#discountamount_' + id).val())) ? 0 : parseFloat($('#discountamount_' + id).val());
                var totalAmount_ = isNaN(parseFloat($('#total_' + id).val())) ? 0 : parseFloat($('#total_' + id).val());


                TotalBeforeTax = TotalBeforeTax + totalBeforeTax_;
                TotalTax = TotalTax + totalTaxAmount_;
                TotalDiscount = TotalDiscount + totalDiscountAmount_;
                TotalBalance = TotalBalance + totalAmount_;
                var exBalanche = $('#txtExExchangeTotalBalance').val();
                RemainingBalance = TotalBalance - exBalanche;
                $('#txtTotalBeforeTax').val(TotalBeforeTax.toFixed(2));
                $('#txtTax').val(TotalTax.toFixed(2));
                $('#txtDiscount').val(TotalDiscount.toFixed(2));
                $('#txtTotalBalance').val(TotalBalance.toFixed(2));
                $('#txtRemainingBalanceBalance').val(RemainingBalance.toFixed(2));
            });
        }

         //Batch processing start there
  let seletedItemId = '';
  let selectedQty = 0;
  let itemQty = 0;
  let selectedRowId = '';

  function ShowBatchData(id) {
      ViewBatch(id);
  }
  function ViewBatch(id) {
      var itemCode = $('#itemCode_' + id).val();
      var fromWH = $('#warehouse_' + id).val();
      if (fromWH != null && fromWH != "") {
          fromWH = fromWH.trim();
      }

      if (fromWH == null || fromWH == "")
      {
          var message = "The warehouse can not be null please login again.";
          ShowMessage(message);
          window.location.href = '@Url.Action("Logout", "Home")';
      }
      seletedItemId = itemCode;
      selectedQty = 0;
      selectedRowId = id;
      const data = ItemBatches[itemCode];

      $('#batchModal').modal("hide");
      let rows = '';
      itemQty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
      $(".rowBatchesQty").html(itemQty);

      if (data) {
          if (data.length == 0) {
              ShowMessage("Insufficient Stock. Please add stock then add Batch");
              return;
          }
          if (data.length == 1) {
              if (data[0].Stock < itemQty) {
                  ShowMessage("Insufficient Stock. Please add stock then add Batch");
                  return;
              }
              setBatch(id, seletedItemId, [
                  {
                      BatchNo: data[0].BatchNum,
                      BatchQuantity: itemQty
                  }
              ]);
          } else {
              data.forEach((item, index) => {
                  rows += bindBatchRow(item, index);
              });
              $('#batchRows').html(rows);
              $('#batchModal').modal("show");
          }
      }
  }

  function bindBatchRow(item, index) {
      return `<tr id="${index}">
                               <td>${index + 1}</td>
                               <td>${item.ItemName}</td>
                               <td>${item.BatchNum}</td>
                               <td>${item.ExpDate}</td>
                               <td>${item.InDate}</td>
                               <td>${item.Stock}</td>
                               <td>
                                   <input type="number" id="batchQuantity" class="form-control batchQuantity" oninput="ValidationBatchesTotal(this, ${item.Stock})" />
                                   <input type="number" id="batchStock" value="${item.Stock}" style="display:none" />
                                   <input type="text" style="display: none" class="batchNo" value="${item.BatchNum}" />
                               </td>
                           </tr>`
  }
  function ValidationBatchesTotal(input, stock) {
      if ($(input).val() == '') return;

      let value = Number($(input).val());
      if (value <= 0) {
          ShowMessage("Qty must be greater than 0.");
          $(input).val('');
          return;
      }

      if (value > stock) {
          ShowMessage("Selected qty can not greater than stock.");
          $(input).val('');
          return;
      }

      let totalValue = getTotalSelectedQty();
      if (totalValue > itemQty) {
          ShowMessage("Select batch qty can't be greater than item qty.");
          $(input).val('');
          return;
      }

      selectedQty = totalValue;
  }


  function AddBatches() {
      var rowId = selectedRowId;

      var batchNumberEnable = $("#batchNumberEnable_" + rowId).val();
      var serialNumberEnable = $("#serialNumberEnable_" + rowId).val();

      if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
          if (itemQty !== getTotalSelectedQty()) {
              ShowMessage("Select batch qty and item qty must be equal.");
              return;
          }

          let batches = [];
          $('.batchQuantity').each(function () {
              const parent = $(this).parent();
              const qty = parseFloat($(this).val());
              if (qty > 0) {
                  const batchNumber = $(parent).find('.batchNo').val();
                  batches.push({
                      BatchNo: batchNumber,
                      BatchQuantity: qty
                  })
              }
          });

          setBatch(rowId, seletedItemId, batches);
      }

      if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
          if (ValidationSerial()) {
              const table = document.getElementById("serialItem");
              table.setAttribute("id", "serialItem" + rowId);

              $("#main").append("<div id='dynamic" + rowId + "'></div>");
              $('#dynamic' + rowId).append($('#containerDetailsRow' + rowId));
              $("#price_" + rowId).prop("disabled", true);
          } else {
              if ($('#containerDetailsRow' + rowId).length) {
                  $('#containerDetailsRow' + rowId).remove();
              }
          }
      }

  }


  function setBatch(rowId, seletedItemId, batches) {
      itemBatchSelected[seletedItemId] = batches;
      $("#showBatchBtn_" + rowId).removeClass("btn-primary").addClass("btn-success");
      $('#quantity_' + rowId).prop('readonly', true);
  }

        function bindWarehouseDropdown(elementId, warehouses) {
            $(elementId).empty();
            for (var i = 0; i < warehouses.length; i++) {
                $(elementId).append($("<option></option>").val(warehouses[i].WhsCode).html(warehouses[i].WhsName));
            }
        }

  function getTotalSelectedQty() {
      let totalValue = 0;
      $('.batchQuantity').each(function () {
          const qty = parseFloat($(this).val());
          if (!isNaN(qty)) {
              totalValue += qty;
          }
      });

      return totalValue;
        }

        function ShowSerialData(id) {
            ViewSerial(id);
            $("#eid").val(id);
        }
        function ViewSerial(id) {
            var itemCode = $('#itemCode_' + id).val();
            var fromWH = $('#warehouse_' + id).val() ?? "";
            var urlpath = '@Url.Action("ViewSerial", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                dataType: 'html',
                data: { ItemCode: itemCode, WareHouse: fromWH, id: id},
                type: "Get",
                async: false,
                success: function (data) {

                    $("#containerDetails").append("<div id='containerDetailsRow" + id + "'></div>");
                    $('#containerDetailsRow' + id).html(data);
                }
            });
        }
        function CloseBatches() {
            var rowId = parseFloat($("#eid").val());
            if ($('#containerDetailsRow' + rowId).length) {
                $('#containerDetailsRow' + rowId).remove();
            }

        }
        function AddBatches() {
            var rowId = parseFloat($("#eid").val());

            var batchNumberEnable = $("#batchNumberEnable_" + rowId).val();
            var serialNumberEnable = $("#serialNumberEnable_" + rowId).val();

            if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
                if (ValidationBatches() == true) {
                    const table = document.getElementById("batchesItem");
                    table.setAttribute("id", "batchesItem" + rowId);

                    $("#main").append("<div id='dynamic" + rowId + "'></div>");
                    $('#dynamic' + rowId).append($('#containerDetailsRow' + rowId));
                    $("#showBtn_" + rowId).prop("disabled", true);
                    $("#quantity_" + rowId).prop("disabled", true);
                    $("#price_" + rowId).prop("disabled", true);
                } else {
                    if ($('#containerDetailsRow' + rowId).length) {
                        $('#containerDetailsRow' + rowId).remove();
                    }
                }
            }
            if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
                if (ValidationSerial() == true) {
                    const table = document.getElementById("serialItem");
                    table.setAttribute("id", "serialItem" + rowId);

                    $("#main").append("<div id='dynamic" + rowId + "'></div>");
                    $('#dynamic' + rowId).append($('#containerDetailsRow' + rowId));
                    $("#showSerialBtn_" + rowId).prop("disabled", true);
                    $("#quantity_" + rowId).prop("disabled", true);
                    $("#price_" + rowId).prop("disabled", true);
                } else {
                    if ($('#containerDetailsRow' + rowId).length) {
                        $('#containerDetailsRow' + rowId).remove();
                    }
                }
            }

        }
        function ValidationBatches() {
            //debugger;
            var isValid = true;
            var message = "Some Values Required";
            var rowId = parseFloat($("#eid").val());
            var itemQty = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());
            var batchesTotal = 0;
            $('#batchesItem tbody tr').each(function () {
                var idr = $(this).attr('id');
                var batchQty = isNaN(parseFloat($('#batchQuantity_' + rowId + idr).val())) ? 0 : parseFloat($('#batchQuantity_' + rowId + idr).val());
                batchesTotal += batchQty;
            });

            if (itemQty < batchesTotal) {
                isValid = false;
                message = "Batches Total Quantity can't be greater than Item Quantity";
                return;
            }
            if (batchesTotal == 0) {
                isValid = false;
                message = "Batches Total Quantity can't be Zero";
                return;
            }

            if (isValid == false) {
                ShowMessage(message);
            }
            return isValid;
        }
        function ValidationSerial() {
            //debugger;
            var isValid = true;
            var message = "Some Values Required";
            var rowId = parseFloat($("#eid").val());
            var itemQty = isNaN(parseFloat($('#quantity_' + rowId).val())) ? 0 : parseFloat($('#quantity_' + rowId).val());

            var checked = $('#tbodyid input:checked').length > 0;
            if (!checked) {
                isValid = false;
                message = "Check at least one checkbox";
            }

            var batchesTotal = 0;
            $('#serialItem tbody tr').each(function (key, value) {
                soId = $(this).prop("id");
                if ($('#chk_' + rowId + soId).is(":checked")) {
                    debugger;
                    var batchQty = isNaN(parseFloat($('#serialStock_' + rowId + soId).val())) ? 0 : parseFloat($('#serialStock_' + rowId + soId).val());
                    batchesTotal += batchQty;
                }
            });

            if (itemQty < batchesTotal) {
                isValid = false;
                message = "Serial Total Quantity can't be greater than Item Quantity";
                /*   return;*/
            }
            if (itemQty > batchesTotal) {
                isValid = false;
                message = "Item Quantity  can't be greater than Serial Total Quantity";
                /*   return;*/
            }

            if (isValid == false) {
                ShowMessage(message);
            }
            return isValid;
        }
        function ValidationBatchesTotal(rowIdCount) {
            debugger;
            var isValid = true;
            var message = "Some Values Required";
            debugger;
            var itemRow = $('#batchRow_' + rowIdCount).val();
            var itemQty = isNaN(parseFloat($('#quantity_' + itemRow).val())) ? 0 : parseFloat($('#quantity_' + itemRow).val());

            var batchQuantity = isNaN(parseFloat($('#batchQuantity_' + rowIdCount).val())) ? 0 : parseFloat($('#batchQuantity_' + rowIdCount).val());
            var batchStock = isNaN(parseFloat($('#batchStock_' + rowIdCount).val())) ? 0 : parseFloat($('#batchStock_' + rowIdCount).val());


            if (batchStock < batchQuantity) {
                isValid = false;
                message = "Quantity can't be greater than stock";
                $('#batchQuantity_' + rowIdCount).css('border-bottom', '2px solid red');
                ShowMessage(message);
                $('#batchQuantity_' + rowIdCount).val(batchStock);
                return;
            }
            // each function does not work '#salesOrder tbody tr'
            var batchesTotal = 0;
            $('#batchesItem tbody tr').each(function () {
                var idr = $(this).attr('id');
                var batchQty = isNaN(parseFloat($('#batchQuantity_' + itemRow + idr).val())) ? 0 : parseFloat($('#batchQuantity_' + itemRow + idr).val());
                batchesTotal += batchQty;
            });

            if (itemQty < batchesTotal) {
                isValid = false;
                message = "Batches Total Quantity can't be greater than Item Quantity";
                $('#batchQuantity_' + rowIdCount).css('border-bottom', '2px solid red');
                $('#batchQuantity_' + rowIdCount).val(0);
                ShowMessage(message);
                return;
            }
        }

        function RemoveRow(id) {
            debugger;
            var trLength = $('#salesOrder tbody tr').length;
            if (trLength > 1) {
                $('#tr_' + id).remove();
                TotalLineCalculation();
                //SerialTable();
            } else {
                return;
            }
        }

        function SaveValidation() {
            var isValid = true;
            var message = "Some Values Required";
            if ($('#txtDocDate').val() == '' || $('#txtDocDate').val() == null) {
                ValidationColorChangeNew("txtDocDate", "divDocDate", "Posting Date Required", false);
                isValid = false;
            }
            if ($('#ddlBranch').val() == 0 || $('#ddlBranch').val() == '') {
                ValidationColorChangeNew("ddlBranch", "divBranch", "Branch Required", true);
                isValid = false;
            }

            var totalBalance = isNaN(parseFloat($('#txtRemainingBalanceBalance').val())) ? 0 : parseFloat($('#txtRemainingBalanceBalance').val());
                var rowTotalAmount = 0;
                $('#paymentMode tbody tr').each(function () {
                    var idr = $(this).attr('id');
                    var id = idr.substring(3);
                    var rowAmount = isNaN(parseFloat($('#amount_' + id).val())) ? 0 : parseFloat($('#amount_' + id).val());
                    rowTotalAmount += rowAmount;
                });

                if (totalBalance != rowTotalAmount) {
                    ValidationColorChangeNew("txtRemainingBalanceBalance", "divRemainingBalance", "Total Remaining Balance amount must be equal to Total Paid", true);
                    isValid = false;
                }
            var exBalance = isNaN(parseFloat($('#txtExExchangeTotalBalance').val())) ? 0 : parseFloat($('#txtExExchangeTotalBalance').val());
            var neBalance = isNaN(parseFloat($('#txtTotalBalance').val())) ? 0 : parseFloat($('#txtTotalBalance').val());
            if (exBalance > neBalance) {
                ValidationColorChangeNew("txtTotalBalance", "divTotalBalance", "Total  Balance amount must be gather then to Total Exchange Balance", true);
                isValid = false;
            }

            //Items Required
            if ($('#salesOrder tbody tr').length == 0 || $('#salesOrder tbody tr').length == '') {
                isValid = false;
                message = "Product/Treatment Required";
            }
            $('#salesOrder tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var qty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
                var itemCode = $('#itemCode_' + id).val()
                debugger;
                var batchNumberEnable = $("#batchNumberEnable_" + id).val();
                var serialNumberEnable = $("#serialNumberEnable_" + id).val();

                if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
                    let batches = itemBatchSelected[itemCode];
                    if (batches === undefined || batches.length === 0) {
                        isValid = false;
                        message = "Please select batch for " + itemCode;
                        return;
                    }

                    let totalBatchQty = 0;
                    batches.forEach((batch) => {
                        totalBatchQty += batch.BatchQuantity;
                    });

                    if (qty !== totalBatchQty) {
                        isValid = false;
                        message = "Selected batch qty mismatch. Please re-select batch for " + itemCode;
                        return;
                    }
                }

                if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
                    if ($('#dynamic' + id).length) {

                    } else {
                        isValid = false;
                        message = "Please add serial" + itemCode;
                        return;
                    }
                    var serialTotal = 0;
                    $("#serialItem" + id + " tbody tr").each(function (key, value) {
                        soId = $(this).prop("id");
                        if ($('#chk_' + id + soId).is(":checked")) {
                            debugger;
                            var serialQty = isNaN(parseFloat($('#serialStock_' + id + soId).val())) ? 0 : parseFloat($('#serialStock_' + id + soId).val());
                            serialTotal += serialQty;
                        }
                    });

                    if (qty < serialTotal) {
                        isValid = false;
                        message = "Serial Total Quantity can't be greater than Item Quantity";
                        return;
                    }
                    if (qty > serialTotal) {
                        isValid = false;
                        message = "Item Quantity  can't be greater than Serial Total Quantity";
                        return;
                    }
                }

                if (itemCode === '' || itemCode === null) {
                    isValid = false;
                    message = "Please Select BarCode";
                    $('#barcode_' + id).css('border-bottom', '2px solid red');
                    return;
                }
                if (qty === 0) {
                    isValid = false;
                    message = "Qty Cannot be 0 ";
                    $('#quantity_' + id).css('border-bottom', '2px solid red');
                    return;
                }


            });

            $('#paymentMode tbody tr').each(function () {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var voucherAmount = isNaN(parseFloat($('#voucheramount_' + id).val())) ? 0 : parseFloat($('#voucheramount_' + id).val());
                var Amount = isNaN(parseFloat($('#amount_' + id).val())) ? 0 : parseFloat($('#amount_' + id).val());

                var mode = $('#mode_' + id).val()
                if (mode == 2) {
                    if (Amount > voucherAmount) {
                        isValid = false;
                        message = "Amount can't gather then Voucher Amount";
                        $('#amount_' + id).css('border-bottom', '2px solid red');
                        return;
                    }
                }
            });

            if (isValid == false) {
                ShowMessage(message);

            }
            return isValid;
        }
        function SaveExchangeInvoice() {
            if (SaveValidation() == true) {
                swal({
                    title: "Are you sure?",
                    text: "",
                    type: "success",
                    showCancelButton: true,
                    cancelButtonClass: 'btn-secondary waves-effect',
                    confirmButtonClass: 'btn-success waves-effect waves-light',
                    confirmButtonText: 'Yes!',
                    closeOnConfirm: false

                }, function () {
                    $('.confirm').prop("disabled", true);
                    $('.cancel').prop("disabled", true);
                    SaveSIinal();
                });
            }
        }
        function pad2(number) {
            return (number < 10 ? '0' : '') + number;
        }
        function DateConversionToYYYYMMDD(inputDate) {
            // Split the input date into day, month, and year parts
            var parts = inputDate.split('-');
            var day = parts[0];
            var month = parts[1];
            var year = parts[2];
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var monthIndex = monthNames.indexOf(month);
            monthIndex++; // Adjust for 0-based indexing
            // Create a Date object with the parsed values
            var dateObject = new Date(year, monthIndex - 1, day);
            // Format the date as "YYYYMMDD"
            var formattedDate = dateObject.getFullYear() + pad2(dateObject.getMonth() + 1) + pad2(dateObject.getDate());
            return formattedDate
        }
        function DateConversionToDateMonthYear(inputDate) {
            var parts = inputDate.split('/');
            var day = parts[0];
            var month = parts[1];
            var year = parts[2];
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var monthName = monthNames[parseInt(month) - 1];
            var formattedDate = day + '-' + monthName + '-' + year;
            return formattedDate
        }
        function SaveSIinal() {
            swal.close();
            var jsonData = {};
            var date = $('#txtDocDueDate').val();
            var newdate = DateConversionToYYYYMMDD(date);
            var inputDate = $('#txtDocDate').val();
            var formattedDate = DateConversionToYYYYMMDD(inputDate);
            var ItemTypeVal = '';
            if ($('#ddlType').val() == 'I') {
                ItemTypeVal = 'I';
            }
            if ($('#ddlType').val() == 'S') {
                ItemTypeVal = 'S';
            }


            jsonData["CardCode"] = $('#ddlCustomer').val();
            jsonData["Branch"] = $('#ddlBranch').val();
            jsonData["PostingDate"] = formattedDate;  //"20230814"
            jsonData["DocDueDate"] = formattedDate; //$('#txtDocDueDate').val();
            jsonData["RefNo"] = '';
            jsonData["RefDate"] = formattedDate;// $('#txtDocDate').val();
            jsonData["Remarks"] = $('#txtRrmarks').val;
            jsonData["SalesEmployee"] = $('#ddlSalesEmployee').val;
            jsonData["ItemType"] = ItemTypeVal;

            var jsonObjs = [];
            var count = 0;

            $('#exExchangeItem tbody tr').each(function () {
                var theObj = {};
                var idr = $(this).attr('id');
                var id = idr.substring(3);

                var rowChkClicked = $("#chk_" + id).prop("checked");
                if (rowChkClicked) {
                    //debugger;
                    var itemCode = $('#itemCodeEx_' + id).val();
                    var qty = isNaN(parseFloat($('#returnQtyEx_' + id).val())) ? 0 : parseFloat($('#returnQtyEx_' + id).val());
                    var uom = ($('#uomEx_' + id).val() !== "") ? $('#uomEx_' + id).val() : "";
                    var price = isNaN(parseFloat($('#priceEx_' + id).val())) ? 0 : parseFloat($('#priceEx_' + id).val());
                    var discount = isNaN(parseFloat($('#discountEx_' + id).val())) ? 0 : parseFloat($('#discountEx_' + id).val());
                    var taxcode = ($('#taxcodeEx_' + id).val() !== "") ? $('#taxcodeEx_' + id).val() : "";
                    var discountamount = isNaN(parseFloat($('#discountamountEx_' + id).val())) ? 0 : parseFloat($('#discountamountEx_' + id).val());
                    var wareHouse = $('#warehouseEx_' + id).val();

                    var docEntry = $('#docEntryEx_' + id).val();
                    var objType = ($('#objTypeEx_' + id).val() != '') ? $('#objTypeEx_' + id).val() : '-1';
                    var lineNum = $('#lineNumEx_' + id).val();
                    var visOrder = $('#visOrderEx_' + id).val();

                    var jsonObjsBatches = [];
                    var jsonObjsSerial = [];


                    theObj["VisOrder"] = parseInt(visOrder);
                    theObj["Type"] = "C";
                    theObj["BaseType"] = objType;
                    theObj["BaseEntry"] = parseInt(docEntry);
                    theObj["BaseLine"] = parseInt(lineNum);
                    theObj["ItemCode"] = itemCode;
                    theObj["Quantity"] = qty;
                    theObj["DocDueDate"] = newdate;
                    theObj["UOM"] = uom;
                    theObj["PriceBeforeDiscount"] = price;
                    theObj["Discountamount"] = discountamount;
                    theObj["TaxCode"] = taxcode;
                    theObj["DiscountPercentage"] = discount;
                    theObj["WhsCode"] = wareHouse;
                    theObj["DifferenceAmount"] = 0;

                    theObj["Batches"] = jsonObjsBatches;
                    theObj["Serial"] = jsonObjsSerial;


                    jsonObjs.push(theObj);
                }

            });

            $('#salesOrder tbody tr').each(function() {
                var theObj = {};
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var itemCode = $('#itemCode_' + id).val();
                var qty = isNaN(parseFloat($('#quantity_' + id).val())) ? 0 : parseFloat($('#quantity_' + id).val());
                var uom = ($('#uom_' + id).val() !== "") ? $('#uom_' + id).val() : "";
                var price = isNaN(parseFloat($('#price_' + id).val())) ? 0 : parseFloat($('#price_' + id).val());
                var discount = isNaN(parseFloat($('#discount_' + id).val())) ? 0 : parseFloat($('#discount_' + id).val());
                var taxcode = ($('#taxcode_' + id).val() !== "") ? $('#taxcode_' + id).val() : "";
                var discountamount = isNaN(parseFloat($('#discountamount_' + id).val())) ? 0 : parseFloat($('#discountamount_' + id).val());
                var wareHouse = $('#warehouse_' + id).val();
                var deliverydate = $('#deliverydate_' + id).val();
                var deliveryDate = DateConversionToYYYYMMDD(deliverydate);

                var docEntry = $('#docEntry_' + id).val() ?? "";
                var objType = ($('#objType_' + id).val() != '') ? $('#objType_' + id).val() : '-1';
                var lineNum = $('#lineNum_' + id).val() ?? "";
                var visOrder = $('#visOrder_' + id).val();

                var batchNumberEnable = $('#batchNumberEnable_' + id).val();
                var serialNumberEnable = $('#serialNumberEnable_' + id).val();

                var jsonObjsBatches = [];
                var jsonObjsSerial = [];

                if (batchNumberEnable == "Y" && serialNumberEnable == "N") {
                    const batches = itemBatchSelected[itemCode];
                    batches.forEach((selectedBatch, i) => {
                        jsonObjsBatches.push({
                            ...selectedBatch,
                            VisOrder: parseInt(visOrder)
                        })
                    });
                }
                if (batchNumberEnable == "N" && serialNumberEnable == "Y") {
                    $("#serialItem" + id + " tbody tr").each(function (key, value) {
                        var SerialItemObj = {};
                        var soId = $(this).prop("id");
                        if ($('#chk_' + id + soId).is(":checked")) {
                            SerialItemObj.VisOrder = parseInt(count); //count;
                            SerialItemObj.InternalSerialNumber = $('#intrSerialNo_' + id + soId).val() ?? "";
                            SerialItemObj.SystemSerialNumber = $('#sysSerialNo_' + id + soId).val() ?? "";
                            SerialItemObj.ManufacturerSerialNumber = $('#suppSerialNo_' + id + soId).val() ?? "";
                            jsonObjsSerial.push(SerialItemObj);
                        }
                    });
                }


                theObj["VisOrder"] = count;
                theObj["Type"] = "I";
                theObj["BaseType"] = objType;
                theObj["BaseEntry"] = parseInt(docEntry);
                theObj["BaseLine"] = parseInt(lineNum);
                theObj["ItemCode"] = itemCode;
                theObj["Quantity"] = qty;
                theObj["DocDueDate"] = deliveryDate;
                theObj["UOM"] = uom;
                theObj["PriceBeforeDiscount"] = price;
                theObj["Discountamount"] = discountamount;
                theObj["TaxCode"] = taxcode;
                theObj["DiscountPercentage"] = discount;
                theObj["WhsCode"] = wareHouse;
                theObj["DifferenceAmount"] = 0;

                theObj["Batches"] = jsonObjsBatches;
                theObj["Serial"] = jsonObjsSerial;


                jsonObjs.push(theObj);
                count = count + 1;
            });
            jsonData["Items"] = jsonObjs;


            var jsonObjs2 = [];

            debugger;
            $("#paymentMode tbody tr").each(function (key, value) {
                var modeObj = {};
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                debugger;
                modeObj.PaymentType = $('#mode_' + id).val() ?? "";
                modeObj.Bank = $('#account_' + id).val() ?? "";
                modeObj.Amount = $('#amount_' + id).val() ?? "";
                modeObj.CardNo = $('#cardNumber_' + id).val() ?? "";
                var mode = $('#mode_' + id).val()
                if (mode == 2) {
                    modeObj.CardNo = $('#voucher_' + id).val() ?? "";
                }
                modeObj.Tranid = $('#transactionID_' + id).val() ?? "";
                if ($('#amount_' + id).val() > 0) {
                    jsonObjs2.push(modeObj);
                }
            });


            jsonData["PaymentDetails"] = jsonObjs2;


            var urlpath2 = '@Url.Action("SaveExchangeInvoice", "SalesInvoice")';
            $.ajax({
                contentType: "application/json",
                data: JSON.stringify(jsonData),
                dataType: 'json',
                url: urlpath2,
                type: "POST",
                /* async: false,*/
                beforeSend: function () {
                    $('#testSpan').show();
                    $('#btnExchangeSi').prop('disabled', true);
                },
                success: function (result) {
                    $('#testSpan').hide();
                    //debugger;
                    if (result.UnAutorized == 1) {
                        //Web Project Session Out
                        window.location.href = '@Url.Action("Logout", "Home")';
                    } else {
                        if (result.dataList.ReturnCode == "-99999") {
                            //API Project Session Out
                            window.location.href = '@Url.Action("Logout", "Home")';
                        } else {
                            var message = result.dataList.ReturnMsg;
                            if (result.dataList.ReturnCode == "0000") {
                        swal({
                            title: " Saved Successfull",
                            text: '',
                            type: "success",
                            showCancelButton: false,
                            cancelButtonClass: 'btn-secondary waves-effect',
                            confirmButtonClass: 'btn-success waves-effect waves-light',
                            confirmButtonText: 'Yes!',
                            closeOnConfirm: false
                        }, function () {
                          /*  printPage(result.ReturnDocEntry);*/
                            window.location.href =  '@Url.Action("Index", "SalesInvoice")';
                        });
                    } else {
                                ShowMessage(message);
                                $('#btnExchangeSi').prop('disabled', false);
                    }
                        }
                    }

                }
                })
        }
        function AddPaymentModeRow() {
              var tr = $('#paymentMode tbody tr').length + 200;
              var values = $("#paymentMode tbody tr")
                .map(function() { return parseInt($(this).attr('id').substring(3)); }).get();
            var index = values.indexOf(tr);
            if (index >= 0) {
                tr = Math.max.apply(Math, values) + 1;
            }
            var urlpath = '@Url.Action("AddRowForPaymentMode", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'html',
                data: { tr: tr },
                async: false,
                success: function(data) {
                    $('#paymentMode tbody').append(data);
                    LoadModeInRow("mode_" + tr);
                }
            });
            $('#mode_' + tr).select2();
        }
        function RemovePaymentModeRow(id) {
            debugger;
            var trLength = $('#paymentMode tbody tr').length;
            if (trLength > 1) {
                $('#tr_' + id).remove();
                CalculateTotalPaid();
            } else {
                return;
            }
        }
        function SerialPaymentModeTable() {
            $('#paymentMode tbody tr').each(function (index, element) {
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                $('#ts_' + id).html(index + 1);
            });
        }
        function GetPaymentMode() {
            var urlpath = '@Url.Action("GetPaymentMethod", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                type: "Get",
                data: {  },
                async: false,
                success: function (data) {
                    modeList = data;
                }
            });
        }
        function LoadModeInRow(elementId) {
            var array = [];
            var rowCount = $('#paymentMode tbody tr').length;
            for (let count = 0; count < rowCount; count++) {
                array.push(parseInt($("#mode_" + count).val()));
            };
            $('#' + elementId + '').append("<option value=''>--Mode--</option>");
            for (var i = 0; i < modeList.length; i++) {
                if (jQuery.inArray(modeList[i].Value, array) == -1) {
                    $('#' + elementId + '').append($("<option></option>").val(modeList[i].Value).html(modeList[i].Description));
                }
            }
        }
        function GetPaymentBankByMode(rowId) {
            var mode = $('#mode_' + rowId).val();
            if (mode == 0) {
                swal("At first select Mode ");
                $('#mode_' + rowId).val('0').trigger("change");
                return;
            }
            var urlpath = '@Url.Action("GetPaymentBankCodes", "SalesInvoice")';
            $.ajax({
                url: urlpath,
                type: "Get",
                dataType: 'json',
                data: { PaymentMethod: mode },
                async: false,
                success: function(data) {
                    $("#account_" + rowId).empty();
                    $("#account_" + rowId).append("<option value=''>--Select Accounts--</option>");
                    for (var i = 0; i < data.length; i++) {
                        $("#account_" + rowId).append($("<option></option>").val(data[i].BankCode).html(data[i].BankCode));
                    }
                }
            });

            var paymentCount = 0;
            $("#paymentMode tbody tr").each(function (key, value) {
                var modeObj = {};
                var idr = $(this).attr('id');
                var id = idr.substring(3);
                var mode = $('#mode_' + id).val()
                if (mode == 2 || mode == 8) {
                    paymentCount = 1;
                }
            });

            var voucherType = $("#ddlType").val();

             if (mode == 2 && voucherType == "S") {
                var cardCode = $('#ddlCustomer').val().trim();
                var urlpath = '@Url.Action("GetCustomerVoucher", "SalesOrderNew")';
                $.ajax({
                    url: urlpath,
                    type: "Get",
                    dataType: 'json',
                    data: { VoucherType: voucherType, CardCode: cardCode },
                    async: false,
                    success: function (data) {
                        debugger;
                        $("#voucher_" + rowId).empty();
                        $("#voucher_" + rowId).append("<option value=''>--Select Voucher--</option>");
                        for (var i = 0; i < data.length; i++) {
                            $("#voucher_" + rowId).append($("<option></option>").val(data[i].CardId).html(data[i].CardNo));
                        }
                    }
                });

                $('#salesOrder tbody tr').each(function () {
                    var theObj = {};
                    var idr = $(this).attr('id');
                    var id = idr.substring(3);
                    var discount = isNaN(parseFloat($('#discount_' + id).val())) ? 0 : parseFloat($('#discount_' + id).val());
                    if (discount > 0) {
                        $("#discount_" + id).val(0);
                        $('#discountMode_' + id).val(discount);
                        LineCalculation(id);
                    }

                });

            } else if (mode == 8 && voucherType == "I") {
                var cardCode = $('#ddlCustomer').val().trim();
                var urlpath = '@Url.Action("GetCustomerVoucher", "SalesOrderNew")';
                $.ajax({
                    url: urlpath,
                    type: "Get",
                    dataType: 'json',
                    data: { VoucherType: voucherType, CardCode: cardCode },
                    async: false,
                    success: function (data) {
                        $("#voucher_" + rowId).empty();
                        $("#voucher_" + rowId).append("<option value=''>--Select Voucher--</option>");
                        for (var i = 0; i < data.length; i++) {
                            $("#voucher_" + rowId).append($("<option></option>").val(data[i].CardId).html(data[i].CardNo));
                        }
                    }
                });
                $('#salesOrder tbody tr').each(function () {
                    var theObj = {};
                    var idr = $(this).attr('id');
                    var id = idr.substring(3);
                    var discount = isNaN(parseFloat($('#discount_' + id).val())) ? 0 : parseFloat($('#discount_' + id).val());
                    if (discount > 0) {
                        $("#discount_" + id).val(0);
                        $('#discountMode_' + id).val(discount);
                        LineCalculation(id);
                    }

                });

            } else {
                $('#salesOrder tbody tr').each(function () {
                    var theObj = {};
                    var idr = $(this).attr('id');
                    var id = idr.substring(3);
                    if (paymentCount == 0) {
                        var discountMode = isNaN(parseFloat($('#discountMode_' + id).val())) ? 0 : parseFloat($('#discountMode_' + id).val());
                        if (discountMode > 0) {
                            $("#discountMode_" + id).val(0);
                            $('#discount_' + id).val(discountMode);
                            LineCalculation(id);
                        }
                    }

                });
                $("#voucher_" + rowId).empty();
            }


        }
        function GetVAmountByVoucher(rowId) {
            var voucherType = $("#ddlType").val();
            var cardCode = $('#ddlCustomer').val().trim();
         /*   var CardId = $('#voucher_' + rowId).val();*/
            var CardId = isNaN(parseFloat($('#voucher_' + rowId).val())) ? 0 : parseFloat($('#voucher_' + rowId).val());
            if (CardId == 0) {
                swal("At first select Voucher ");
                $('#voucher' + rowId).val('0').trigger("change");
                return;
            }

              var urlpath = '@Url.Action("GetCustomerVoucherBalance", "SalesOrderNew")';
                $.ajax({
                    url: urlpath,
                    type: "Get",
                    dataType: 'json',
                    data: { VoucherType: voucherType, CardCode: cardCode, CardId: CardId},
                    async: false,
                    success: function (data) {
                        $('#voucheramount_' + rowId).val(data.Balance);
                    }
                });

        }


    </script>
}

